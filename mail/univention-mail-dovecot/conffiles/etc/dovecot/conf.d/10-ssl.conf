@%@UCRWARNING=# @%@

##
## SSL settings
##

# SSL/TLS support: yes, no, required. <doc/wiki/SSL.txt>
ssl = yes

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. Included doc/mkcert.sh can be used to easily generate self-signed
# certificate, just make sure to update the domains in dovecot-openssl.cnf
@!@
import re

fqdn = '%(hostname)s.%(domainname)s' % configRegistry
print('ssl_cert = < %s' % configRegistry.get('mail/dovecot/ssl/certificate', '/etc/univention/ssl/%s/cert.pem' % fqdn))
print('ssl_key = < %s' % configRegistry.get('mail/dovecot/ssl/key', '/etc/univention/ssl/%s/private.key' % fqdn))


def read_config_from_ucr():
    RE = re.compile(r'^mail/dovecot/ssl/sni/([^/]+)/([^/]+)(/?)$')
    config = {}
    for key, value in configRegistry.items():
        match = RE.match(key)
        if not match:
            continue
        group, opt_name, no_value = match.groups()
        settings = config.setdefault(group, {})
        settings[opt_name] = None if no_value else value
    return config


sni_settings = read_config_from_ucr()
for hostname, settings in sni_settings.items():
    errors = []
    if 'certificate' not in settings:
        errors.append('No certificate path configured for hostname %s.' % hostname)
    if 'key' not in settings:
        errors.append('No certificate key path configured for hostname %s.' % hostname)
    if errors:
        print('# Could not write section for hostname %s, errors: %s\n#' % (hostname, '\n# '.join(errors)))
        continue
    print("""
local_name %s {
  ssl_cert = < %s
  ssl_key = < %s
}
""" % (hostname, settings['certificate'], settings['key']))
@!@

# If key file is password protected, give the password here. Alternatively
# give it when starting dovecot with -p parameter. Since this file is often
# world-readable, you may want to place this setting instead to a different
# root owned 0600 file by using ssl_key_password = <path.
#ssl_key_password =

# PEM encoded trusted certificate authority. Set this only if you intend to use
# ssl_verify_client_cert=yes. The file should contain the CA certificate(s)
# followed by the matching CRL(s). (e.g. ssl_ca = </etc/ssl/certs/ca.pem)
@!@
ca_file_ucrv = configRegistry.get("mail/dovecot/ssl/cafile", "").lstrip('< ')
print("ssl_ca = < %s" % ca_file_ucrv if ca_file_ucrv else 'ssl_ca = ')
@!@

# Require that CRL check succeeds for client certificates.
#ssl_require_crl = yes

# Directory and/or file for trusted SSL CA certificates. These are used only
# when Dovecot needs to act as an SSL client (e.g. imapc backend or submission service). The
# directory is usually /etc/ssl/certs in Debian-based systems and the file is
# /etc/pki/tls/cert.pem in RedHat-based systems.
ssl_client_ca_dir = /etc/ssl/certs
#ssl_client_ca_file =

# Request client to send a certificate. If you also want to require it, set
# auth_ssl_require_client_cert=yes in auth section.
@!@
print("ssl_verify_client_cert = %s" % ("yes" if configRegistry.get("mail/dovecot/ssl/cafile", "") else "no"))
@!@

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You'll also need to set
# auth_ssl_username_from_cert=yes.
#ssl_cert_username_field = commonName

ssl_dh = </var/lib/dovecot/dh.pem

# Minimum SSL protocol to use
@!@
print('ssl_min_protocol = %s' % configRegistry.get('mail/dovecot/ssl/min_protocol', "TLSv1.2"))
@!@

# SSL ciphers to use
@!@
print('ssl_cipher_list = %s' % configRegistry.get('mail/dovecot/ssl/cipher_list', "EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:CAMELLIA256-SHA:AES256-SHA:CAMELLIA128-SHA:AES128-SHA"))
@!@

# Prefer the server's order of ciphers over client's.
@!@
print('ssl_prefer_server_ciphers = %s' % configRegistry.get('mail/dovecot/ssl/prefer_server_ciphers', "yes"))
@!@

# SSL crypto device to use, for valid values run "openssl engine"
#ssl_crypto_device =

# SSL extra options. Currently supported options are:
#   compression - Enable compression.
#   no_ticket - Disable SSL session tickets.
#ssl_options =
