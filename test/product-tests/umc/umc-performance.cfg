[Global]
jenkins_description: umc performance test
jenkins_report_html: true
jenkins_report_junit: true
jenkins_report_html_index: **/locust-reports/**/*.html
jenkins_publish_patterns: **/locust-reports/**/*
logfile: autotest-umc-performance-test.log


kvm_server: [ENV:KVM_BUILD_SERVER]
kvm_user: [ENV:KVM_USER]
kvm_extra_label: pt-umc-performance-[ENV:UCS_VERSION]
kvm_operating_system: UCS
kvm_template: [ENV:KVM_TEMPLATE]
kvm_ucsversion: [ENV:UCS_VERSION]
kvm_architecture: amd64

kvm_dhcp: true
parallel: true
recover: 8

environment:
 EXTRA_COMPONENT=[ENV:EXTRA_COMPONENT]
 UCS_VERSION=[ENV:UCS_VERSION]
 TARGET_VERSION=[ENV:TARGET_VERSION]
 RELEASE_UPDATE=[ENV:RELEASE_UPDATE]
 ERRATA_UPDATE=[ENV:ERRATA_UPDATE]
 MASTER_IP=[master_IP]
 LOCUST_IP=[locust_IP]
 MASTER_HOSTNAME=master
 DOMAINNAME=performance.test
 SCOPE=[ENV:SCOPE]

[master]
kvm_memory: 32G
kvm_vcpus: 8
profile:
 hostname="master"
 domainname="performance.test"
 ldap/base="dc=master-umc-performance,dc=test"
 root_password="univention"
 locale/default="en_US.UTF-8:UTF-8"
 packages_install=""
 packages_remove=""
 server/role="domaincontroller_master"
command1:
 . utils.sh && basic_setup
 . utils.sh && add_tech_key_authorized_keys
 apt-get purge --yes debian-archive-keyring || :  # broken generic-unsafe 4.4-x
 . utils.sh && rotate_logfiles
 . utils.sh && upgrade_to_latest_patchlevel            # 1. update to latest patchlevel in OLD release
 . utils.sh && run_setup_join
 . utils.sh && import_license 300000
 . utils.sh && upgrade_to_latest_test_errata_if        # 2. install test errata in OLD release
 . utils.sh && RELEASE_UPDATE=public jenkins_updates   # 3. update the latest public release
 . utils.sh && upgrade_to_latest_test_errata_if        # 4. install test errata for the latest public release
 . utils.sh && add_extra_apt_scope
 . utils.sh && jenkins_updates                         # 5. maybe update to the test release if so configured by Jenkins
 ucr set umc/http/processes=0 apache2/server-limit=5003 apache2/max-request-workers=5003 apache2/min-spare-servers=100 apache2/max-spare-servers=200 umc/http/maxthreads=200 umc/http/requestqueuesize=200; systemctl restart univention-management-console-server apache2
 . utils.sh && run_join_scripts
 . utils.sh && assert_version "[ENV:TARGET_VERSION]"
 . utils.sh && install_with_unmaintained ucs-test-end ucs-test-tools
 create-32k-users-in-groups -n 5000 -f
 . utils.sh && do_reboot
command2:
 LOCAL sleep 120
 . utils.sh && wait_for_reboot
command3:
 # clone repo
command4:
 # run locust tests against master scenario 1
command5:
 # reboot master
 # . utils.sh && do_reboot
 # LOCAL sleep 120
 # . utils.sh && wait_for_reboot
command6:
 # run locust tests against master scenario 2
command7:
 # reboot master
 # . utils.sh && do_reboot
 # LOCAL sleep 120
 # . utils.sh && wait_for_reboot
command8:
 # run locust tests against master scenario 3
command9:
 . utils.sh && run_tests -s end
 . utils.sh && prepare_results
 LOCAL utils/utils-local.sh fetch-results [SELF_IP] [SELF]
# get log files
files:
 ~/ec2/scripts/activate-errata-test-scope.sh /root/
 ~/ec2/license/license.secret /etc/


[locust1]

kvm_memory: 12G
kvm_vcpus: 12
profile:
 hostname="locust"
 domainname="locust-umc-performance.test"
 ldap/base="dc=locust-umc-performance,dc=test"
 root_password="univention"
 locale/default="en_US.UTF-8:UTF-8"
 packages_install=""
 packages_remove=""
 server/role="domaincontroller_master"
command1:
 . utils.sh && basic_setup
 . utils.sh && add_tech_key_authorized_keys
 . utils.sh && jenkins_updates
 ucr set docker/daemon/default/json='{"seccomp-profile": "/etc/docker/seccomp-systemd.json"}'
 systemctl restart docker.service
command2:
 univention-install -y git
command3:
 git clone https://git.knut.univention.de/jbroders/locus_test.git --depth 1 --branch idelgado/5.0-3/56089-Create-a-locust-test-to-measure-UMC
 chmod a+w locus_test
 cd locus_test && touch target_ca.crt && chmod a+w target_ca.crt
command4:
 # run locust tests against master (scenario 1)
 # update the master.env file to add the LOCUST_HOST to https://master-umc-performance.test
 # cd locus_test && ./scenario1_baseline.sh
 #
 # cd locus_test && ./scenario1.sh

command5:
 # wait for the master to be ready
command6:
 # run locust tests master (scenario 2)
 # cd locus_test && ./scenario2_baseline.sh
 #
 # cd locus_test && ./scenario2.sh

command7:
 # wait for the master to be ready
command8:
 # run locust tests master (scenario 3)
 cd locus_test && ./scenario3_baseline.sh

 cd locus_test && ./scenario3.sh
command9:
 LOCAL test "$UCS_TEST_RUN" = "false" || mkdir -p locust-reports
 LOCAL test "$UCS_TEST_RUN" = "false" || utils/utils-local.sh fetch-files "root@[SELF_IP]" '/root/locus_test/locust-reports/*' locust-reports
