@%@UCRWARNING=# @%@

include "/etc/dhcp/univention.conf";
include "/etc/dhcp/local.conf";

option ldap-servers code 128 = array of ip-address;
option ldap-base code 129 = string;

@!@
OPTIONS_PREFIX = 'dhcpd/options/'
for key, value in configRegistry.items():
    if not key.startswith(OPTIONS_PREFIX):
        continue
    option = key[len(OPTIONS_PREFIX):]
    if not option or not value:
        continue
    try:
        name, code = option.split('/', 1)
    except ValueError:
        continue
    print('option %s code %s = %s;' % (name, code, value))

if configRegistry.is_true('dhcpd/authoritative'):
    print('authoritative;')
@!@

ldap-server "@%@ldap/server/name@%@";
ldap-dhcp-server-cn "@%@hostname@%@";
ldap-username "@%@ldap/hostdn@%@";
ldap-password-file "/etc/machine.secret";
@!@
print('ldap-port %s;' % configRegistry.get('ldap/server/port', 389))
if configRegistry.get('dhcpd/ldap/base'):
    print('ldap-base-dn "%(dhcpd/ldap/base)s";' % configRegistry)
else:
    print('ldap-base-dn "cn=dhcp,%(ldap/base)s";' % configRegistry)
@!@ldap-method dynamic;

# ldap debug logging can be enabled or disabled with the UCR variable dhcpd/ldap/debug
@!@
if configRegistry.is_true('dhcpd/ldap/debug', False):
    print('ldap-debug-file "/var/log/dhcp-ldap-startup.log";')
else:
    print('# ldap-debug-file "/var/log/dhcp-ldap-startup.log";')
@!@

# dynamic DNS: with external name server only!
@!@
# flake8: noqa
import os

if configRegistry.is_true('dhcpd/ddns'):
    print('ddns-updates on;')
    print('ddns-update-style %s;' % configRegistry.get('dhcpd/ddns/style', 'interim'))
    print('ddns-domainname "%s";' % configRegistry.get('dhcpd/ddns/domainname', configRegistry['domainname']))
    hostname_default = 'binary-to-ascii (16, 8, "-",substring (hardware, 1, 12))'
    print('ddns-hostname = %s;' % configRegistry.get('dhcpd/ddns/hostname', hostname_default))
    print('update-static-leases %s;' % ('true' if configRegistry.is_true('dhcpd/ddns/static') else 'false',))

    # security?
    security = None
    if configRegistry.is_true('dhcpd/ddns/security'):
        security = configRegistry.get('dhcpd/ddns/security/key', 'DHCP_UPDATER')
        sname = configRegistry.get('dhcpd/ddns/security/secret')
        secret = open(sname).readline().strip('\n') if sname and os.path.exists(sname) else ''
        print('''
key %s {
	algorithm %s;
	secret "%s";
}

''' % (security, configRegistry.get('dhcpd/ddns/security/algorithm', 'HMAC-MD5.SIG-ALG.REG.INT'), secret))  # noqa: E101

    # zones to update
    zones = {
        key.split('/')[3]
        for key in configRegistry
        if key.startswith('dhcpd/ddns/zone/')
    }
    for zone in zones:
        name, primary = (configRegistry.get('dhcpd/ddns/zone/%s/%s' % (zone, key)) for key in ('name', 'primary'))
        if all((name, primary)):
            key = 'key %s;' % security if security else ''
            print('''
zone %s {
	primary %s;
	%s
}

''' % (name, primary, key))  # noqa: E101
@!@
