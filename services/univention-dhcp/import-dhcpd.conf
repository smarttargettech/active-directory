#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Univention DHCP
#  migrate a dhcp conf
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2004-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.


# ./import-dhcpd.conf $ldap_base dhcpd.conf > dhcpd.ldif
# dhcpd.ldif: s/255.255.255.0/24/g


import re
import sys
from argparse import ArgumentParser, FileType, Namespace
from typing import Any, Iterator, List, Optional, Sequence, Tuple, Union  # noqa: F401


def parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("--verbose", "-v", action="count", help="Increase verbosity")
    parser.add_argument("ldapbase", help="LDAP base")
    parser.add_argument("conf", type=FileType("r"), default="-", nargs="?", help="DHCP server configuration file")
    opt = parser.parse_args()
    return opt


opt = parse_args()
ldapdhcpbase = 'cn=dhcp,%s' % opt.ldapbase
ldappolicybase = 'cn=dhcp,cn=policies,%s' % opt.ldapbase
group_count = 0


def section_name(type: str, args: Sequence[str]) -> str:
    global group_count
    if type == 'subnet':
        return 'subnet %s' % args[0]
    elif type == 'host':
        return 'host %s' % args[0]
    elif type == 'group':
        group_count += 1
        return 'group %d' % group_count
    raise ValueError(type)


def print_policy(name: str, options: Sequence[Tuple[str, List[str]]]) -> str:
    dn = 'cn=%s,%s' % (name, ldappolicybase)
    found = False
    for type, arg in options:
        if type == 'routers':
            attr = 'univentionDhcpRouters'
        elif type == 'domain-name-servers':
            attr = 'univentionDhcpDomainNameServers'
        elif type == 'domain-name':
            attr = 'univentionDhcpDomainName'
        elif type == 'netbios-name-servers':
            attr = 'univentionDhcpNetbiosNameServers'
        elif type == 'netbios-scope':
            attr = 'univentionDhcpNetbiosScope'
        elif type == 'netbios-node-type':
            attr = 'univentionDhcpNetbiosNodeType'
        elif type == 'max-lease-time':
            attr = 'univentionDhcpLeaseTimeMax'
        elif type == 'default-lease-time':
            attr = 'univentionDhcpLeaseTimeDefault'
        elif type == 'min-lease-time':
            attr = 'univentionDhcpLeaseTimeMin'
        elif type == 'unknown clients':
            attr = 'univentionDhcpUnknownClients'
        elif type == 'bootp':
            attr = 'univentionDhcpBootp'
        elif type == 'booting':
            attr = 'univentionDhcpBooting'
        elif type == 'duplicates':
            attr = 'univentionDhcpDuplicates'
        elif type == 'declines':
            attr = 'univentionDhcpDeclines'
        elif type == 'client-updates':
            attr = 'univentionDhcpClientUpdates'
        elif type == 'known-clcients':
            attr = 'univentionDhcpPoolKnownClients'
        elif type == 'unknown-clients':
            attr = 'univentionDhcpPoolUnknownClients'
        elif type == 'dynamic-bootp-clients':
            attr = 'univentionDhcpPoolDynamicBootpClients'
        elif type == 'authoritative':
            attr = 'univentionDhcpAuthoritative'
        elif type == 'bootp-unknown-clients':
            attr = 'univentionDhcpBootUnknownClients'
        elif type == 'ddns-hostname':
            attr = 'univentionDhcpDdnsHostname'
        elif type == 'ddns-domainname':
            attr = 'univentionDhcpDdnsDomainname'
        elif type == 'ddns-rev-domainname':
            attr = 'univentionDhcpDdnsRevDomainname'
        elif type == 'ddns-updates-style':
            attr = 'univentionDhcpDdnsUpdateStyle'
        elif type == 'ddns-updates':
            attr = 'univentionDhcpDdnsUpdate'
        elif type == 'do-forward-updates':
            attr = 'univentionDhcpDoForwardUpdates'
        elif type == 'filename':
            attr = 'univentionDhcpFilename'
        elif type == 'get-lease-hostnames':
            attr = 'univentionDhcpGetLeaseHostnames'
        elif type == 'ping-check':
            attr = 'univentionDhcpPingCheck'
        elif type == 'server-identifier':
            attr = 'univentionDhcpServerIdentifier'
        elif type == 'server-name':
            attr = 'univentionDhcpServerName'
        elif type == 'update-static-leases':
            attr = 'univentionDhcpUpdateStaticLeases'
        elif type == 'vendor-option-space':
            attr = 'univentionDhcpVendorOptionSpace'
        else:
            print('unknown type:', type, file=sys.stderr)
            continue

        if not found:
            print('dn: %s' % dn)
            print('objectClass: top')
            print('objectClass: univentionPolicy')
            print('objectClass: univentionPolicyDhcp')
            print('cn: %s' % name)
            found = True

        for val in arg:
            print('%s: %s' % (attr, val))
    if found:
        print()
        return dn
    return ''


def section_rdn(type: str, arguments: Any, name: str) -> str:
    if type == 'subnet':
        rdn = 'cn=%s' % arguments[0]
    elif type == 'host':
        rdn = 'cn=%s' % arguments
    elif type == 'group':
        rdn = 'ou=%s' % name
    return rdn


def get_section_dn() -> str:
    rdns = [rec[3] for rec in sections]
    return ','.join(reversed(rdns))


def print_section(type: str, arguments: Any, dn: str, options: Sequence[Tuple[str, Sequence[str]]], name: str, policy_dn: str) -> None:
    print('dn: %s' % dn)
    if type == 'subnet':
        print('objectClass: top')
        print('objectClass: univentionDhcpSubnet')
        print('objectClass: univentionPolicyReference')
        print('cn: %s' % arguments[0])
        print('dhcpNetMask: %s' % arguments[1])
    elif type == 'host':
        print('objectClass: top')
        print('objectClass: univentionDhcpHost')
        print('objectClass: univentionPolicyReference')
        print('cn: %s' % arguments)
    elif type == 'group':
        print('objectClass: top')
        print('objectClass: organizationalUnit')
        print('objectClass: univentionPolicyReference')
        print('ou: %s' % name)
    else:
        print('ignore type:', type, file=sys.stderr)
        return

    for opt, vals in options:
        a = ''
        if opt == 'hardware':
            attr = 'dhcpHWAddress:'
        elif opt == 'fixed-address':
            attr = 'univentionDhcpFixedAddress:'
        elif opt == 'range':
            i, j = vals
            a = '%s %s' % (i, j or i)
            attr = 'dhcpRange:'
        else:
            attr = ''
        # else:
        #    attr = 'dhcpStatements: %s'%(opt)
        if a:
            print('%s %s' % (attr, a))
            a = ''
        else:
            for val in vals:
                if attr:
                    print('%s %s' % (attr, val))
                # else:
                #    print('%s %s' % (opt, val))

    if policy_dn:
        print('univentionPolicyReference: %s' % policy_dn)
    print()


class regexp_match:

    def __init__(self, pattern: str) -> None:
        self.regexp = re.compile(pattern)

    def match(self, line: str) -> List[str]:
        result = self.regexp.findall(line)
        if result:
            return result[0]
        return []


class option_match:
    comma_regexp = re.compile(r'[ \t]*,[ \t]*')

    def __init__(self, option: str) -> None:
        if option.startswith('option '):
            option = 'option[ \t]+' + option[7:]
        self.regexp = re.compile(r'^' + option + '[ \t]+(.+)$')

    def match(self, line: str) -> Optional[List[str]]:
        results = self.regexp.findall(line)
        if results:
            result = self.comma_regexp.split(results[0])
            for i in range(0, len(result)):
                if result[i][0] == '"' and result[i][-1] == '"':
                    result[i] = result[i][1:-1]
            return result
        return None

# pattern


section_types = [
    ('subnet', regexp_match('^subnet[ \t]+([0-9.]+)[ \t]+netmask[ \t]+([0-9.]+)$')),
    ('host', regexp_match('^host[ \t]+([^ \t]+)$')),
    ('group', regexp_match('^group$')),
]  # type: List[Tuple[str, Union[regexp_match, option_match]]]

option_types = [
    ('routers', option_match('option routers')),
    ('domain-name', option_match('option domain-name')),
    ('domain-name-servers', option_match('option domain-name-servers')),
    ('netbios-name-servers', option_match('option netbios-name-servers')),
    ('netbios-scope', option_match('option netbios-scope')),
    ('netbios-node-type', option_match('option netbios-node-type')),
    ('default-lease-time', option_match('default-lease-time')),
    ('max-lease-time', option_match('max-lease-time')),
    ('subnet-mask', option_match('subnet-mask')),
    ('broadcast-address', option_match('option broadcast-address')),
    ('range', regexp_match('^range ([0-9.]+)([ \t]+[0-9.]+)?')),
    ('hardware', option_match('hardware')),
    ('fixed-address', option_match('fixed-address')),
    ('deny', option_match('deny')),
    ('allow', option_match('allow')),
    ('min-lease-time', option_match('min-lease-time')),
    ('unknown clients', option_match('unknown clients')),
    ('bootp', option_match('bootp')),
    ('booting', option_match('booting')),
    ('duplicates', option_match('duplicates')),
    ('declines', option_match('declines')),
    ('client-updates', option_match('client-updates')),
    ('known-clcients', option_match('known-clcients')),
    ('unknown-clients', option_match('unknown-clients')),
    ('dynamic-bootp-clients', option_match('dynamic-bootp-clients')),
    ('authoritative', option_match('authoritative')),
    ('bootp-unknown-clients', option_match('bootp-unknown-clients')),
    ('ddns-hostname', option_match('ddns-hostname')),
    ('ddns-domainname', option_match('ddns-domainname')),
    ('ddns-rev-domainname', option_match('ddns-rev-domainname')),
    ('ddns-updates-style', option_match('ddns-updates-style')),
    ('ddns-updates', option_match('ddns-updates')),
    ('do-forward-updates', option_match('do-forward-updates')),
    ('filename', option_match('filename')),
    ('get-lease-hostnames', option_match('get-lease-hostnames')),
    ('ping-check', option_match('ping-check')),
    ('server-identifier', option_match('server-identifier')),
    ('server-name', option_match('server-name')),
    ('update-static-leases', option_match('update-static-leases')),
    ('vendor-option-space', option_match('vendor-option-space')),
]  # type: List[Tuple[str, Union[regexp_match, option_match]]]

# sections hold all sections that apply
depth = 0
sections = [('global', None, 'global', ldapdhcpbase, [])]  # type: List[Tuple[str, Any, str, str, List[Tuple[str, List[str]]]]]


def parse(text: str) -> Iterator[str]:
    RE_TOKEN = re.compile(
        r"""
        ([;{}])
        |[#][^\r\n]*$
        |("(?:[^"\\]|\\[trnb0-9a-fA-Fx])*")
        |[\n\r]
        """, re.VERBOSE | re.MULTILINE)
    lines = []  # type: List[str]
    for token in RE_TOKEN.split(text):
        if token is None:
            continue
        token = token.strip()
        if not token:
            continue

        if token in ";{}":
            if lines:
                yield ' '.join(lines).strip()
                del lines[:]
            if token in "{}":
                yield token
        else:
            lines.append(token.strip())

    if lines:
        yield ' '.join(lines).strip()


for line in parse(opt.conf.read()):
    if opt.verbose:
        print('processing: %r' % (line,), file=sys.stderr)

    if line == '{':
        depth += 1
    elif line == '}':
        depth -= 1
        dn = get_section_dn()
        type, arguments, name, rdn, options = sections.pop()
        print('end section:', type, file=sys.stderr)

        policy_dn = print_policy(name, options)
        print_section(type, arguments, dn, options, name, policy_dn)
    else:
        found = False
        for stype, spattern in section_types:
            arguments = spattern.match(line)
            if not arguments:
                continue
            name = section_name(stype, arguments)
            rdn = section_rdn(stype, arguments, name)
            print('new section: %s %s' % (stype, rdn), file=sys.stderr)
            sections.append((stype, arguments, name, rdn, []))
            found = True
        if found:
            continue

        for otype, opattern in option_types:
            result = opattern.match(line)
            if not result:
                continue
            # print('new option: %s result=%s'% (type, result), file=sys.stderr)
            sections[depth][4].append((otype, result))
            found = True
        if found:
            continue

type, arguments, name, rdn, options = sections.pop()
print_policy('global', options)
