#!/bin/bash
#
# Univention S4 Connector
#  join script
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2004-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

## joinscript api: bindpwdfile

VERSION=21
. /usr/share/univention-join/joinscripthelper.lib
joinscript_init

. /usr/share/univention-lib/all.sh
. /usr/share/univention-samba4/lib/all.sh

eval "$(univention-config-registry shell)"

NAME="S4 Connector"

this_is_initial_or_rejoin() {
	test "$JS_LAST_EXECUTED_VERSION" -le 0
	return $?
}

this_host_is_registered_as_s4_connector() {
	local my_dn_or_empty
	my_dn_or_empty="$(univention-directory-manager computers/computer list "$@" \
		--filter "(&(univentionService=${NAME})(cn=$hostname))" \
		| sed -ne 's|^DN: ||p')"
	test -n "$my_dn_or_empty"
	return $?
}

this_host_is_not_registered_as_s4_connector() {
	! this_host_is_registered_as_s4_connector
}

if is_domain_in_admember_mode; then
	echo "ERROR: The domain is in AD Member Mode."
	## Don't autostart S4 Connector
	/etc/init.d/univention-s4-connector stop
	univention-config-registry set	connector/s4/autostart?no \
						connector/s4/listener/disabled=true
	systemctl try-restart univention-directory-listener
	exit 1
fi

if [ $JS_LAST_EXECUTED_VERSION -le 0 ]; then
	# Remove existing sqlite DBs while re-joining
	internal_db="/etc/univention/connector/s4internal.sqlite"
	locking_db="/etc/univention/connector/lockingdb.sqlite"
	cache_db="/etc/univention/connector/s4cache.sqlite"
	timestamp=$(date +%Y%m%d%H%M%S)
	for dbfile in "$internal_db" "$locking_db" "$cache_db"; do
		test -e "$dbfile" && mv "$dbfile" "${dbfile}_${timestamp}"
		touch "$dbfile" && chmod 640 "$dbfile"
	done
fi

if [ -z "$samba4_ldap_base" ]; then
	echo "ERROR: samba4/ldap/base is empty (most likely the"
	echo "       univention-samba4 join script has not been executed)."
	echo "       Stopping at this point because samba4/ldap/base is the"
	echo "       default for connector/s4/ldap/base and without this the"
	echo "       s4-connector can not work properly."
	exit 1
fi

univention-config-registry set \
	connector/s4/ldap/host?"$ldap_master" \
	connector/s4/ldap/base?"$samba4_ldap_base" \
	connector/s4/ldap/ssl?"no" \
	connector/s4/mapping/group/language?en \
	connector/s4/ldap/protocol?ldapi \
	connector/s4/ldap/socket?/var/lib/samba/private/ldap_priv/ldapi

if [ "$server_role" != 'domaincontroller_master' -a "$server_role" != 'domaincontroller_backup' ]; then
	ucr set connector/ldap/bindpw?"/etc/machine.secret" \
		connector/ldap/binddn?"$ldap_hostdn" \
		connector/ldap/server?"$hostname.$domainname"
fi

# Create an extended attribute to synchronize the GPO attributes
udm settings/extended_attribute create "$@" --ignore_exists \
			--position "cn=custom attributes,cn=univention,$ldap_base" \
			--set name=gPLink \
			--set objectClass=msGPO \
			--append module=container/cn \
			--append module=container/ou \
			--append module=container/dc \
			--set shortDescription=gPLink \
			--set CLIName=gPLink \
			--set longDescription="MS Group Policy Link" \
			--set doNotSearch=1 \
			--set syntax=string \
			--set mayChange=1 \
			--set disableUDMWeb=1 \
			--set ldapMapping=msGPOLink || die

# Be sure these containers exists
if [ $JS_LAST_EXECUTED_VERSION -le 0 ]; then
	udm container/cn create "$@" --ignore_exists \
		--set name=Builtin || die

	udm container/cn create "$@" --ignore_exists \
		--set name=System || die

	udm container/cn create "$@" --ignore_exists \
		--position "cn=System,$ldap_base" \
		--set name=Policies || die

	udm container/ou create "$@" --ignore_exists \
		--set name="Domain Controllers" \
		--set description="Default container for domain controllers" || die
fi

udm container/cn create "$@" --ignore_exists \
			--position "cn=System,$ldap_base" \
			--set name=WMIPolicy || die

udm container/cn create "$@" --ignore_exists \
			--position "cn=WMIPolicy,cn=System,$ldap_base" \
			--set name=SOM || die

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
	--udm_syntax /usr/lib/python3/dist-packages/univention/admin/syntax.d/s4_connector.py || die

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
	--schema /usr/share/univention-s4-connector/ldap/msgpo.schema \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/container/msgpo.py || die

ucs_registerLDAPExtension "$@" \
	--schema /usr/share/univention-s4-connector/ldap/mswmi.schema || die

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/settings/mswmifilter.py || die

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
	--schema /usr/share/univention-s4-connector/ldap/msprintconnectionpolicy.schema \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/settings/msprintconnectionpolicy.py || die

ucs_registerLDAPExtension "$@" \
	--schema /usr/share/univention-s4-connector/ldap/msgpwl.schema || die

for udm_module in gpwl-wireless.py gpwl-wired.py gpwl-wireless-blob.py; do
	ucs_registerLDAPExtension "$@" \
		--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
		--udm_module "/usr/lib/python3/dist-packages/univention/admin/handlers/ms/$udm_module"  || die
done

ucs_registerLDAPExtension "$@" \
	--schema /usr/share/univention-s4-connector/ldap/msgpipsec.schema || die

for udm_module in gpipsec-filter.py gpipsec-isakmp-policy.py gpipsec-nfa.py gpipsec-negotiation-policy.py gpipsec-policy.py; do
	ucs_registerLDAPExtension "$@" \
		--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
		--udm_module "/usr/lib/python3/dist-packages/univention/admin/handlers/ms/$udm_module"  || die
done

ucs_registerLDAPExtension "$@" \
	--schema /usr/share/univention-s4-connector/ldap/msgpsi.schema || die

for udm_module in gpsi-category-registration.py  gpsi-class-store.py  gpsi-package-registration.py; do
	ucs_registerLDAPExtension "$@" \
		--ucsversionstart "5.0-7" --ucsversionend "5.99-0" \
		--udm_module "/usr/lib/python3/dist-packages/univention/admin/handlers/ms/$udm_module" || die
done

#ucs_registerLDAPExtension "$@" \
#	--schema /usr/share/univention-s4-connector/ldap/n_domainpolicy.schema \
#	--udm_module "/usr/lib/python3/dist-packages/univention/admin/handlers/ms/domainpolicy.py" --ucsversionstart "5.0-7" || die

if ! is_ucr_true 'connector/s4/allow/secondary'; then
	s4connector_dc=$(get_available_s4connector_dc) || exit $?

fi

# deactivate sambaDomain sync to ucs for slaves in ucs@school
if [ "$server_role" = "domaincontroller_slave" ]; then
	if is_ucr_true 'connector/s4/allow/secondary'; then # Slave PDC
		ucr set connector/s4/mapping/dc/syncmode?'write'
	fi
fi

if [ -z "$s4connector_dc" ] \
	|| [ "$s4connector_dc" = "$hostname" ]; then

	##
	## This branch runs in case
	##   a) we are first system to provide this service
	## or
	##   b) connector/s4/allow/secondary is true
	##
	## Note that connector/s4/allow/secondary is set in these cases:
	## 1. automatically on UCS@school Samba/AD Slave PDCs
	## 2. manually on Multischool Primary where S4-Connector was installed
	##    later, after UCS@school Samba/AD Slave PDCs have been joined.
	##

	## we are first or only system to provide this service

	LDB_URI="tdb:///var/lib/samba/private/sam.ldb"

	domaindn="DC=${kerberos_realm//./,DC=}" # that's what /usr/lib/python3/dist-packages/samba/provision/__init__.py uses
	if ! ldbsearch -H "$LDB_URI" -b $domaindn -s base dn 2>/dev/null| grep -qi ^"dn: $domaindn"; then
		echo "Samba4 does not seem to be provisioned, exiting $0"
		exit 1
	fi

	if [ $JS_LAST_EXECUTED_VERSION -le 0 ]; then

		/usr/share/univention-heimdal/salt_krb5Keys "$@"

		users_default_administrator=$(custom_username "Administrator")     ## this account already exists in Samba4, set UCS password for it
		/usr/sbin/univention-password_sync_ucs_to_s4 "$@" "$users_default_administrator"
		if [ $? != 0 ]; then
			/etc/init.d/samba-ad-dc restart
			sleep 3
			/usr/sbin/univention-password_sync_ucs_to_s4 "$@" "$users_default_administrator"
		fi
		/usr/share/univention-s4-connector/sync_krbtgt "$@"
	fi

	ucs_addServiceToLocalhost "${NAME}" "$@" || die

	univention-config-registry set connector/s4/autostart=yes

	readarray -t dcs < <(univention-ldapsearch -xLLL \
		"(objectClass=univentionDomainController)" cn \
		| sed -n 's/^cn: //p')
	for dc in "${dcs[@]}"; do
		/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "relativeDomainName=$dc" --first
	done
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=dns/alias" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=dns/txt_record" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=dns/srv_record" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=dns/reverse_zone" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=dns/forward_zone" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=container/cn" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=container/msgpo" --first
	/usr/share/univention-s4-connector/resync_object_from_ucs.py --filter "univentionObjectType=container/ou" --first

	if is_ucr_true connector/s4/listener/disabled; then
		univention-config-registry unset connector/s4/listener/disabled
		univention-directory-listener-ctrl resync s4-connector
	fi

	old_sleep="$connector_s4_poll_sleep"
	old_retry="$connector_s4_retryrejected"

	univention-config-registry set connector/s4/poll/sleep=1 connector/s4/retryrejected=2

	if [ $JS_LAST_EXECUTED_VERSION -le 0 ] && is_ucr_true connector/s4/mapping/gpo; then
		/etc/init.d/univention-s4-connector stop

		# If OpenLDAP msgpo link is empty, it can be overwritten by the Samba 4 value. This
		# is important in case the S4 connector is installed on a School Directory Node. Anyway, before
		# changing it, read the following issues:
		#	https://forge.univention.org/bugzilla/show_bug.cgi?id=45439
		#	https://forge.univention.org/bugzilla/show_bug.cgi?id=43478
		#	https://forge.univention.org/bugzilla/show_bug.cgi?id=26926
		/usr/share/univention-s4-connector/msgpo.py --write2ucs --only-override-empty "$@"
	fi

	if [ $JS_LAST_EXECUTED_VERSION -gt 0 ]; then
		## Block for update code

		if [ $JS_LAST_EXECUTED_VERSION -lt 6 ] && is_ucr_true connector/s4/mapping/msprintconnectionpolicy; then
			# resync msPrint-ConnectionPolicy objects from samba to ucs
			/usr/share/univention-s4-connector/resync_object_from_s4.py --filter '(objectClass=msPrint-ConnectionPolicy)'
		fi

		if [ $JS_LAST_EXECUTED_VERSION -lt 7 ] && is_ucr_true connector/s4/mapping/msgpwl; then
			# resync msgpwl objects from samba to ucs
			/usr/share/univention-s4-connector/resync_object_from_s4.py --filter '(|(objectClass=ms-net-ieee-80211-GroupPolicy)(objectClass=ms-net-ieee-8023-GroupPolicy)(objectClass=msieee80211-Policy))'
		fi

		if [ $JS_LAST_EXECUTED_VERSION -lt 7 ] && is_ucr_true connector/s4/mapping/msgpipsec; then
			# resync msgpipsec objects from samba to ucs
			/usr/share/univention-s4-connector/resync_object_from_s4.py --filter '(|(objectClass=ipsecBase)(objectClass=ipsecPolicy)(objectClass=ipsecFilter)(objectClass=ipsecNegotiationPolicy)(objectClass=ipsecNFA)(objectClass=ipsecISAKMPPolicy))'
		fi

		if [ $JS_LAST_EXECUTED_VERSION -lt 7 ] && is_ucr_true connector/s4/mapping/msgpsi; then
			# resync msgpsi objects from samba to ucs
			/usr/share/univention-s4-connector/resync_object_from_s4.py --filter '(|(objectClass=classStore)(objectClass=categoryRegistration)(objectClass=packageRegistration))'
		fi

#		if [ $JS_LAST_EXECUTED_VERSION -lt 8 ] && is_ucr_true connector/s4/mapping/domainpolicy; then
#			# resync domainpolicy objects from samba to ucs
#			/usr/share/univention-s4-connector/resync_object_from_s4.py --filter '(objectClass=domainPolicy)'
#		fi
	fi

	/etc/init.d/univention-s4-connector restart

	univention-config-registry set dns/backend=samba4
	if [ -x /etc/init.d/named ]; then
		/etc/init.d/named restart
	fi

	# Wait until the local S4 contains the DNS record
	echo -n "Wait for named: "
	count=0
	while [ $count -le "$join_samba_dns_replication_timeout" ]; do
		message=$(LC_ALL=C host -W 1 "$ldap_master" 2>&1| grep 'has \(IPv6 \)\?address ')
		if [ -n "$message" ]; then
			echo " done"
			break
		else
			echo -n "."
			# restart bind9 every 100 seconds
			expr $count % 100 >/dev/null || /etc/init.d/named restart
			# restart samba-ad-dc every 200 seconds
			expr $count % 200 >/dev/null || /etc/init.d/samba-ad-dc restart
			sleep 1
		fi;
		count=$((count+1))
	done

	univention-config-registry set connector/s4/poll/sleep="$old_sleep" connector/s4/retryrejected="$old_retry"

	if [ $count -gt "$join_samba_dns_replication_timeout" ]; then
		echo " failed"
		univention-config-registry set dns/backend=ldap
		if [ -x /etc/init.d/named ]; then
			/etc/init.d/named restart
		fi

		echo "**************************************************************"
		echo "* ERROR: Failed to configure Samba4 as backend for bind.     *"
		echo "*        Please check the samba and the s4-connector logfile.*"
		echo "**************************************************************"
		exit 1
	fi

	# Restart the connector to use the new values for connector/s4/poll/sleep and connector/s4/retryrejected
	/etc/init.d/univention-s4-connector restart

	# fix samba SID in case to ucs SID takes precedence
	if is_ucr_true 'connector/s4/mapping/sid_to_s4'; then
		/usr/share/univention-s4-connector/resync_object_from_ucs.py "$ldap_hostdn"
	fi
else

	if this_is_initial_or_rejoin \
		&& this_host_is_not_registered_as_s4_connector; then
		## Don't autostart S4 Connector on Backup Directory Nodes.
		/etc/init.d/univention-s4-connector stop
		univention-config-registry set	connector/s4/autostart?no \
						connector/s4/listener/disabled=true
		systemctl try-restart univention-directory-listener
	fi
fi

joinscript_save_current_version

exit 0
