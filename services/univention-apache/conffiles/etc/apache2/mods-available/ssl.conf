@%@UCRWARNING=# @%@
Listen 443

#
# Pseudo Random Number Generator (PRNG):
# Configure one or more sources to seed the PRNG of the SSL library.
# The seed data should be of good random quality.
# WARNING! On some platforms /dev/random blocks if not enough entropy
# is available. This means you then cannot use the /dev/random device
# because it would lead to very long connection times (as long as
# it requires to make more entropy available). But usually those
# platforms additionally provide a /dev/urandom device which doesn't
# block. So, if available, use this one instead. Read the mod_ssl User
# Manual for more details.
#
SSLRandomSeed startup builtin
SSLRandomSeed startup file:/dev/urandom 512
SSLRandomSeed connect builtin
SSLRandomSeed connect file:/dev/urandom 512

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#
#   Some MIME-types for downloading Certificates and CRLs
#
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl	.crl

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).
#   (The mechanism dbm has known memory leaks and should not be used).
#SSLSessionCache		 dbm:${APACHE_RUN_DIR}/ssl_scache
SSLSessionCache		shmcb:${APACHE_RUN_DIR}/ssl_scache(512000)
SSLSessionCacheTimeout  300

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization.
#   (Disabled by default, the global Mutex directive consolidates by default
#   this)
#Mutex file:${APACHE_LOCK_DIR}/ssl_mutex ssl-cache


#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate. See the
#   ciphers(1) man page from the openssl package for list of all available
#   options.
#   Enable only secure ciphers:
@!@
print('SSLCipherSuite %s' % configRegistry.get('apache2/ssl/ciphersuite', 'HIGH:MEDIUM:!aNULL'))
@!@

# SSL server cipher order preference:
# Use server priorities for cipher algorithm choice.
# Clients may prefer lower grade encryption.  You should enable this
# option if you want to enforce stronger encryption, and can afford
# the CPU cost, and did not override SSLCipherSuite in a way that puts
# insecure ciphers first.
# Default: Off
@!@
if configRegistry.is_true('apache2/ssl/honorcipherorder', default=False):
    print('SSLHonorCipherOrder on')
else:
    print('SSLHonorCipherOrder off')
@!@

#   Allow insecure renegotiation with clients which do not yet support the
#   secure renegotiation protocol. Default: Off
#SSLInsecureRenegotiation on

#   Whether to forbid non-SNI clients to access name based virtual hosts.
#   Default: Off
@!@
print('SSLStrictSNIVHostCheck %s' % ('On' if configRegistry.is_true('apache2/ssl/strict-sni-vhost-check') else 'Off',))
@!@

# By default Apache supports TLS 1.0, 1.1, 1.2 and 1.3
# To only allow TLS 1.1, TLS 1.2 and TLS 1.3, use apache2/ssl/tlsv11=true
# To only allow TLS 1.2 and TLS 1.3, use apache2/ssl/tlsv12=true
# To only allow TLS 1.3, use apache2/ssl/tlsv13=true
@!@
protocols = ['all', '-SSLv2', '-SSLv3']
if configRegistry.is_true('apache2/ssl/tlsv11', default=False):
    protocols = ['-all', '+TLSv1.1', '+TLSv1.2', '+TLSv1.3']
if configRegistry.is_true('apache2/ssl/tlsv12', default=False):
    protocols = ['-all', '+TLSv1.2', '+TLSv1.3']
if configRegistry.is_true('apache2/ssl/tlsv13', default=False):
    protocols = ['-all', '+TLSv1.3']
print('SSLProtocol %s' % (' '.join(protocols),))
@!@

#  Enable compression on the SSL level. Warning: Enabling compression causes security issues in most setups (the so called CRIME attack).
@!@
if configRegistry.is_true('apache2/ssl/compression', default=False):
    print('SSLCompression on')
else:
    print('SSLCompression off')
@!@

# Warning: Session Tickets require regular reloading of the server!
# Make sure you do this (e.g. via logrotate) before changing this setting!
SSLSessionTickets off

@!@
import re
if configRegistry.is_true("apache2/force_https"):
    print('RewriteEngine on')
    print('RewriteCond %{HTTPS} off')
    pattern = re.compile('^apache2/force_https/exclude/(request_uri|http_host|remote_addr|server_name)/.*')
    excluded = [(pattern.match(key).group(1), configRegistry.get(key)) for key in configRegistry if pattern.match(key)]
    for type_, value in excluded:
        print('RewriteCond %%{%s} !^%s' % (type_.upper(), value))
    print('RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R=301,L]')
    print('')
@!@
