#!/usr/bin/python3
#
# Univention RADIUS 802.1X
#  NTLM-Authentication program
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright (C) 2012-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of the software contained in this package
# as well as the source package itself are made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this package provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use the software under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.


import argparse
import codecs
import sys

from univention.radius import get_NetworkAccess, pyMsChapV2
from univention.radius.networkaccess import NetworkAccessError


LOGFIILE = '/var/log/univention/radius_ntlm_auth.log'


def main():
    # type: () -> int
    parser = argparse.ArgumentParser()
    parser.add_argument('--request-nt-key', action='store_true', required=True)
    parser.add_argument('--username', required=True)
    parser.add_argument('--challenge', required=True)
    parser.add_argument('--nt-response', required=True)
    parser.add_argument('--station-id')
    options = parser.parse_args()
    options.challenge = codecs.decode(options.challenge, 'hex')
    options.nt_response = codecs.decode(options.nt_response, 'hex')
    NetworkAccess = get_NetworkAccess()
    networkAccess = NetworkAccess(options.username, options.station_id, logfile=LOGFIILE)
    try:
        PasswordHash = networkAccess.getNTPasswordHash()
    except NetworkAccessError as exc:
        PasswordHash = None
        networkAccess.logger.warning(exc.msg)
    if PasswordHash and pyMsChapV2.ChallengeResponse(options.challenge, PasswordHash) == options.nt_response:
        print('NT_KEY: %s' % (codecs.encode(pyMsChapV2.HashNtPasswordHash(PasswordHash), 'hex').decode('ASCII').upper(), ))
        return 0
    else:
        print('Logon failure (0xc000006d)')
        return 1


if __name__ == "__main__":
    sys.exit(main())
