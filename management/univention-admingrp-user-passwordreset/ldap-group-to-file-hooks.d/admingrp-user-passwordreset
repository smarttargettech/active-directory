#!/usr/bin/python3
#
# Univention Admingrp User Passwordreset
#  ldap-group-to-file-hooks.d script
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2013-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import argparse
import grp
import subprocess

from univention.config_registry import handler_set, ucr


def _get_members_of(groupname: str) -> set[str]:
    try:
        grpstruct = grp.getgrnam(groupname)
        return set(grpstruct.gr_mem)
    except KeyError:
        return set()


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-slapd-restart", action="store_true", help="do not restart the OpenLDAP server automatically")
    args = parser.parse_args()

    protected_groups = ucr.get('ldap/acl/user/passwordreset/protected/gid')
    if not protected_groups:
        return

    change = []
    for group in protected_groups.split(','):
        key = 'ldap/acl/user/passwordreset/internal/groupmemberlist/%s' % (group,)
        old_value = set(ucr.get(key, "").split(",")) - {""}
        new_value = _get_members_of(group)
        if old_value != new_value:
            change.append('%s=%s' % (key, ",".join(sorted(new_value))))

    if not change:
        return

    handler_set(change)
    subprocess.call(['ucr', 'commit', '/etc/ldap/slapd.conf'])

    if args.no_slapd_restart:
        return

    subprocess.call(['/etc/init.d/slapd', 'graceful-restart'])


if __name__ == '__main__':
    main()
