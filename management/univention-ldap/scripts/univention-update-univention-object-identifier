#!/usr/bin/python3
# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2025 Univention GmbH

# Note:
# When changing this script please also consider changing (via gitlab):
# https://github.com/univention/container-udm-rest/blob/main/docker/ldap-update-univention-object-identifier/ldap-update-univention-object-identifier.py

import logging
from pprint import pformat
from sys import stderr

import univention.config_registry
import univention.uldap


logger = logging.getLogger(__name__)


def setup_logging(level: str | int):
    log_format = "%(asctime)s %(levelname)-5s %(message)s"
    logging.basicConfig(format=log_format, level=level)
    global logger
    logger = logging.getLogger(__name__)


def update_univention_object_identifier(lo: univention.uldap.access):

    result = lo.search(
        filter="(&(objectClass=univentionObject)(!(univentionObjectIdentifier=*)))",
        attr=["univentionObjectIdentifier", "entryUUID"],
    )

    updated_count = 0
    failed_count = 0
    for entry in result:
        logger.debug("Processing %s", entry[0])
        logger.debug("Values:\n%s", pformat(entry[1], indent=4))

        if entry[1].get(
                "univentionObjectIdentifier") or not entry[1].get("entryUUID"):
            logger.warning(
                "Wrong ldap search condition! univentionObjectIdentifier: %s entryUUID: %s",
                entry[1].get("univentionObjectIdentifier"),
                entry[1].get("entryUUID"),
            )
            continue

        try:
            lo.modify(
                entry[0],
                [(
                    "univentionObjectIdentifier",
                    None,
                    entry[1].get("entryUUID"),
                )],
            )
        except Exception as e:
            logger.error(e)
            failed_count += 1
            continue

        updated_count += 1

    logger.info("Updated %s records. Failed to update %s records.",
                updated_count, failed_count)


def main():
    setup_logging(logging.INFO)

    ucr = univention.config_registry.ConfigRegistry()
    ucr.load()

    if ucr.get("server/role") != "domaincontroller_master":
        logger.info("Script can only be run on a Primary Directory Node")
        return 0

    # ldap connection
    try:
        lo = univention.uldap.getRootDnConnection()
    except Exception as ex:
        print("failed to get ldap connection: %s" % (ex,), file=stderr)
        return 1

    logger.info("Updating univentionObjectIdentifier with entryUUID values.")

    update_univention_object_identifier(lo)


# ###########################################################################
# # Main
# ###########################################################################

if __name__ == "__main__":
    main()
