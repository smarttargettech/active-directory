#!/bin/bash
#
# Univention Directory Listener
#  join script
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2004-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

## joinscript api: bindpwdfile

# shellcheck disable=SC2034
VERSION=1

# shellcheck source=/dev/null
. /usr/share/univention-join/joinscripthelper.lib
joinscript_init

die () {
	echo "${0##*/}: $*"
	exit 1
}
have () {
	command -v "$1" >/dev/null
}

eval "$(univention-config-registry shell)"

if [ -n "${UNIVENTION_JOIN_DEBUG:-}" ]
then
	PS4='+ ${BASH_SOURCE[0]}:${LINENO}:${FUNCNAME[0]}@${SECONDS}: '
	set -x
fi

[ -n "${server_role:-}" ] ||
	die "UCR variable 'server/role' is not set or empty"

systemctl stop univention-directory-listener

if [ -e "/var/lib/univention-directory-listener" ]; then
	rm -Rf /var/lib/univention-directory-listener/*
fi

if [ -e "/var/lib/univention-directory-replication" ]; then
	rm -Rf /var/lib/univention-directory-replication/*
fi

if [ -e "/var/lib/univention-ldap/listener/listener" ]; then
	chown listener /var/lib/univention-ldap/listener/listener*
	write_translog=1
else
	write_translog=''
fi

case "$server_role" in
domaincontroller_master)
	systemctl restart univention-directory-listener
	joinscript_save_current_version
	exit 0
	;;
domaincontroller_backup)
	dn="cn=admin,${ldap_base:?}" secret=/etc/ldap.secret
	;;
*)
	dn="${ldap_hostdn:?}" secret=/etc/machine.secret
	;;
esac

fake_replication () {
	# fake_replication creates the local ldap database
	# with ldapsearch and slapadd or by copying a pre
	# defined database backend file to bypass the replication.py
	# listener module
	local time_start time_end minutes

	service slapd stop

	# update schema
	/usr/share/univention-directory-listener/univention-get-ldif-from-master.py -s

	# update local ldap
	rm -f /var/lib/univention-ldap/ldap/*
	time_start="$(date +%s)"
	if [ -f "${listener_init_fake_replication_mdb:-}" ]
	then
		# use local database file (mdb!)
		echo -n "Installing database file $listener_init_fake_replication_mdb ... "
		install -o openldap -g openldap -m 0600 "$listener_init_fake_replication_mdb" /var/lib/univention-ldap/ldap/data.mdb ||
			die "Failed to move MDB file"
	elif [ -f "${listener_init_fake_replication_ldif:-}" ]
	then
		# slapadd local gzip ldif file
		echo -n "slapadd $listener_init_fake_replication_ldif ... "
		zcat "$listener_init_fake_replication_ldif" | slapadd -f /etc/ldap/slapd.conf -q ||
			die "Failed slapadd from 'listener_init_fake_replication_ldif'"
	else
		# ldap search and slapadd
		echo -n "searching LDAP on Primary Node and slapadd ... "
		/usr/share/univention-directory-listener/univention-get-ldif-from-master.py -l -o - | slapadd -f /etc/ldap/slapd.conf -q ||
			die "Failed slapadd with Primary Directory Node LDIF"
	fi
	time_end="$(date +%s)"
	minutes="$(((time_end - time_start) / 60))"
	echo "OK (in $minutes minutes)"
	sync
	chown -R openldap: /var/lib/univention-ldap/ldap

	if [ ! -s /etc/ldap/rootpw.conf ]
	then
		# shellcheck source=/dev/null
		. /usr/share/univention-lib/base.sh
		echo "rootpw \"$(create_machine_password)\"" > /etc/ldap/rootpw.conf
	fi
	service slapd restart

	# resync computer object
	/usr/share/univention-directory-listener/resync-objects.py -f "uid=${hostname:?}\$" -r
}

# 1: fake listener initialization
# init the listener without the configured handlers,
# special case replication.py, create local ldap by
# search and slapadd ...
if [ -n "${listener_init_fake:-}" ]
then
	echo "faking listener initialization"

	# get and store notifier id to get changes during initialization
	notifierid_master="$(/usr/share/univention-directory-listener/get_notifier_id.py)" ||
		die "Failed to get Notifier-ID"
	notifierid="${listener_init_fake_notifierid:-"$notifierid_master"}"

	# set notifier id
	echo "$notifierid" > /var/lib/univention-directory-listener/notifier_id
	chown listener /var/lib/univention-directory-listener/notifier_id

	# helper function to customize handler helper for fake initialization
	# for each handler a function fake_NAME is called, if exists, see fake_replication
	if [ -r "${listener_init_fake_helper:-}" ]; then
		# shellcheck source=/dev/null
		. "$listener_init_fake_helper"
	fi

	# fake handler initialization
	install -o listener -m 0700 -d  /var/lib/univention-directory-listener/handlers
	for handler in $listener_init_fake  # IFS
	do
		fake_helper="fake_$handler"
		echo "faking handler '$handler' ..."
		if have "$fake_helper"
		then
			"$fake_helper"
		fi
		echo 3 > "/var/lib/univention-directory-listener/handlers/$handler"
	done
	chown -R listener: /var/lib/univention-directory-listener/handlers

	mode='-P'
else
	notifierid_master=''
	mode='-i'
fi

/usr/sbin/univention-directory-listener "$mode" \
	-d "${listener_debug_level:-1}" \
	-h "${ldap_master:?}" \
	-b "${ldap_base:?}" \
	-m /usr/lib/univention-directory-listener/system \
	-c /var/lib/univention-directory-listener \
	${write_translog:+-o} \
	-ZZ \
	-x \
	${dn:+-D "$dn"} ${secret:+-y "$secret"}
exit_status=$?

# 2: fake listener initialization
# copy listener cache (if defined), because cache without
# replication.py is not fully filled
if [ -f "${listener_init_fake_cache:-}" ]; then
	echo "Installing fake listener cache $listener_init_fake_cache"
	rm -f /var/lib/univention-directory-listener/cache/*
	install -m 0600 -g listener -g nogroup  "$listener_init_fake_cache" /var/lib/univention-directory-listener/cache/data.mdb ||
		die "Failed to install '$listener_init_fake_cache'"
fi

if command -v slapd -f /etc/ldap/slapd.conf >/dev/null
then
	service slapd restart
fi

[ "$exit_status" = 0 ] ||
	die "Failed to start Listener"

if [ -e "/var/lib/univention-directory-listener/handlers/replication" ]
then
	case "$(cat /var/lib/univention-directory-listener/handlers/replication)" in
	1|3) ;;
	*) die "Failed to initialize Listener module 'replication'" ;;
	esac
fi

# The samba join script needs a running listener. Bug #19128
systemctl restart univention-directory-listener

# 3: fake listener initialization on non Primary Nodes
# wait until local notifier id is equal to notifier id of the Primary Node
# otherwise if we could miss something (password change of computer
# during join) if listener_init_fake_notifierid is used
if [ "${notifierid_master:-0}" -gt 0 ]
then
	max="$(date +%s -d "${listener_init_fake_notifierid_timeout:-86400} second")"  # 24h
	while now="$(date +%s)" ; [ "$now" -le "$max" ]
	do
		lid="$(cat /var/lib/univention-directory-listener/notifier_id)"
		printf '\r%5d: waiting for replication (Notifier-ID self:%d <= Primary Node:%d)' "$((max - now))" "$lid" "$notifierid_master"
		[ "$notifierid_master" -le "${lid:-0}" ] && break
		sleep 3
	done
fi

have sss_cache && sss_cache -U
# have sss_cache && sss_cache -G
have nscd && nscd -i group

joinscript_save_current_version
exit 0
