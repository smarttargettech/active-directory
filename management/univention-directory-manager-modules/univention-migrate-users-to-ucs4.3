#!/usr/bin/python3
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2017-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.


import argparse
import binascii
import calendar
import pprint
import sys
import time

import heimdal
import ldap
import ldap.controls.simple
from ldap.filter import filter_format

import univention.admin.allocators
import univention.admin.password
import univention.admin.samba
import univention.admin.uexceptions
import univention.admin.uldap
from univention.config_registry import ConfigRegistry
from univention.lib.s4 import rids_for_well_known_security_identifiers


ucr = ConfigRegistry()
ucr.load()

if ucr.get('server/role') != 'domaincontroller_master':
    print('This script can only be executed on the Primary Directory Node.')
    sys.exit(0)

lo, po = univention.admin.uldap.getAdminConnection()


class Migration:

    def __init__(self) -> None:
        self.exceptions: list[tuple[str, list[tuple[str, bytes | list[bytes], bytes | list[bytes]]], Exception]] = []
        self.modifications = False
        p = argparse.ArgumentParser()
        p.add_argument('--check', action='store_true', help='Makes a dry run by printing out all modifications which would be done.')
        p.add_argument('--set-kerberos-realm', help='Set the given kerberos realm in the domain if none is set.')
        self.args = p.parse_args()

        if ucr.is_true('directory/manager/samba3/legacy', False):
            self.s4connector_present = False
        elif ucr.is_false('directory/manager/samba3/legacy', False):
            self.s4connector_present = True
        else:
            searchResult = lo.search('(&(|(objectClass=univentionDomainController)(objectClass=univentionMemberServer))(univentionService=S4 Connector))', attr=['aRecord', 'aAAARecord'])
            self.s4connector_present = any(ddn for (ddn, attr) in searchResult if {'aAAARecord', 'aRecord'} & set(attr))

        self.migrate_users()
        self.migrate_templates()
        if self.exceptions:
            print('%d errors occurred.' % (len(self.exceptions),), file=sys.stderr)
            for dn, ml, exc in self.exceptions:
                print('%r: %s (modifications: %r)' % (dn, exc, ml), file=sys.stderr)
            raise SystemExit(1)
        if self.modifications and self.args.check:
            raise SystemExit(1)

    def migrate_users(self) -> None:
        """
        Posix:
        posixAccount, shadowAccount, person, univentionPWHistory

        Samba:
        sambaSamAccount, person, univentionPWHistory

        Kerberos:
        krb5Principal, krb5KDCEntry, person, univentionPWHistory

        Mail:
        shadowAccount, univentionMail, person, univentionPWHistory

        Person:
        organizationalPerson, inetOrgPerson, person, univentionPWHistory

        PKI:
        pkiUser, person, univentionPWHistory

        LDAP_Pwd:
        simpleSecurityObject, uidObject, person, univentionPWHistory
        """
        realm = self.get_kerberos_realm()
        primary_group_gid = self.get_primary_gid_number()
        self.alloc: list[tuple[str, str]] = []

        # use the users/user filter from UCS 4.2 but remove "(!(univentionObjectFlag=functional))" because we have the "uid=sys-idp-user" account
        default_user_filter = '(&(|(&(objectClass=posixAccount)(objectClass=shadowAccount))(objectClass=univentionMail)(objectClass=sambaSamAccount)(objectClass=simpleSecurityObject)(objectClass=inetOrgPerson))(!(uidNumber=0))(!(uid=*$)))'
        user_filter = ucr.get('update43/udm/migration/user/filter', default_user_filter)
        for dn, user in lo.search(user_filter):
            ocs = {x.decode('UTF-8') for x in user['objectClass']}
            has_posix = ocs & {'posixAccount'}
            has_shadow = ocs & {'shadowAccount'}
            has_samba = ocs & {'sambaSamAccount'}
            has_kerberos = ocs & {'krb5Principal', 'krb5KDCEntry'}
            has_kerberos_principal = ocs & {'krb5Principal'}
            has_kerberos_kdcentry = ocs & {'krb5KDCEntry'}
            has_mail = ocs & {'univentionMail'}
            has_org_person = ocs & {'organizationalPerson'}
            has_inet_org_person = ocs & {'inetOrgPerson'}
            has_pki = ocs & {'pkiUser'}
            has_ldap = ocs & {'simpleSecurityObject', 'uidObject'}

            is_ldap_only = has_ldap and not any([has_posix, has_shadow, has_samba, has_kerberos, has_mail, has_org_person, has_inet_org_person, has_pki])
            is_contact_only = has_inet_org_person and has_org_person and not any([has_posix, has_shadow, has_samba, has_kerberos, has_mail, has_ldap, has_pki])
            remove_ldap = has_ldap and not is_ldap_only

            if user.get('univentionObjectType') and b'users/user' not in user['univentionObjectType']:
                print('Ignoring non users/user account: %s' % (dn,))
                continue

            if b'synced' in user.get('univentionObjectFlag', []):
                print('Ignoring user from active directory')
                continue

            if is_ldap_only:
                self.modify(dn, [('univentionObjectType', b'users/user', b'users/ldap')])
                # TODO: are there users without univentionObjectType? then we need error handling here!
                continue

            if is_contact_only:
                uid = user.get('uid')[0]
                cn_list = user.get('cn')
                firstname = user.get('givenName', [b''])[0]
                lastname = user.get('sn')[0]
                default_cn = b'%s %s' % (firstname, lastname)
                default_cn = default_cn.strip()
                new_cn = b'%s %s (%s)' % (firstname, lastname, uid)
                new_cn = new_cn.strip()

                ldapdn = ldap.dn.str2dn(dn)
                newldaprdn = []
                for attr, val, ava_type in ldapdn[0]:
                    if attr.lower() == 'uid':
                        attr = 'cn'
                        val = new_cn.decode('utf-8')
                    if attr.lower() == 'cn' and val == default_cn.decode('utf-8'):
                        continue
                    newldaprdn.append((attr, val, ava_type))
                ldapdn[0] = newldaprdn
                newdn = ldap.dn.dn2str(ldapdn)
                self.rename(dn, newdn)

                ml: list[tuple[str, bytes | list[bytes], bytes | list[bytes]]] = []
                if default_cn in cn_list:
                    new_cn_list = [cn for cn in cn_list if cn != default_cn]
                    new_cn_list.append(new_cn)
                    ml.append(('cn', [*cn_list, new_cn], new_cn_list))
                ml.append(('univentionObjectType', b'users/user', b'users/contact'))
                self.modify(newdn, ml)
                # TODO: are there users without univentionObjectType? then we need error handling here!
                continue

            if has_posix:
                # migrate primary group to samba group
                for groupdn, group in lo.search(filter_format('(&(objectClass=univentionGroup)(gidNumber=%s)(!(objectClass=sambaGroupMapping)))', [user['gidNumber'][0].decode('UTF-8')])):
                    self.modify(groupdn, [
                        ('objectClass', [], [b'sambaGroupMapping']),
                        ('sambaSID', b'', self.get_group_sid(int(group['gidNumber'][0])).encode('utf-8')),
                        ('sambaGroupType', b'', b'2'),
                    ])

            ml = []
            if remove_ldap:
                ml.append(('objectClass', [b'uidObject', b'simpleSecurityObject'], []))

            locked = b'L' in user.get('sambaAcctFlags', [b''])[0]
            disabled = b'D' in user.get('sambaAcctFlags', [b''])[0]
            if not disabled:
                try:
                    disabled = int(user.get('shadowExpire', [b''])[0]) < int(time.time() / 3600 / 24)
                except (ValueError, TypeError):
                    pass

                if not disabled:
                    disabled = univention.admin.password.is_locked(user.get('userPassword', [b''])[0].decode('UTF-8'))

            shadowLastChange = user.get('shadowLastChange', [None])[0]
            shadowMax = user.get('shadowMax', [None])[0]
            sambaPwdLastSet = user.get('sambaPwdLastSet', [None])[0]
            sambaMaxPwdAge = self.get_sambaMaxPwdAge()

            password_end_date = None
            if not password_end_date and sambaPwdLastSet and sambaMaxPwdAge:
                try:
                    password_end_date = time.gmtime(int(sambaPwdLastSet) + int(sambaMaxPwdAge))
                except ValueError:
                    pass
            if not password_end_date and shadowLastChange and shadowMax:
                try:
                    password_end_date = time.gmtime((int(shadowLastChange) + int(shadowMax)) * 3600 * 24)
                except ValueError:
                    pass

            password_set_date = None
            if not password_set_date and sambaPwdLastSet:
                try:
                    password_set_date = time.gmtime(int(sambaPwdLastSet))
                except ValueError:
                    pass
            if not password_set_date and shadowLastChange:
                try:
                    password_set_date = time.gmtime(int(shadowLastChange) * 3600 * 24)
                except ValueError:
                    pass

            expiration_date = None
            if not expiration_date and user.get('krb5ValidEnd', [None])[0]:
                try:
                    expiration_date = time.strftime("%Y%m%d%H%M%SZ", user['krb5ValidEnd'][0].decode('ASCII'))
                except (ValueError, TypeError):
                    pass
            if not expiration_date and user.get('shadowExpire', [b''])[0] not in (b'', b'0'):
                try:
                    expiration_date = time.gmtime(int(user['shadowExpire'][0]) * 3600 * 24)
                except (ValueError, TypeError):
                    pass

            uidNumber = user.get('uidNumber', [None])[0]
            sambaNTPassword = user.get('sambaNTPassword', [None])[0]

            serverctrls = None
            ocs_to_add = {'posixAccount', 'shadowAccount', 'sambaSamAccount', 'krb5Principal', 'krb5KDCEntry', 'univentionMail', 'inetOrgPerson', 'organizationalPerson'} - ocs
            ocs_to_remove: set[str] = set()
            if ocs_to_add:
                ml.append(('objectClass', [x.encode('UTF-8') for x in ocs_to_remove], [x.encode('UTF-8') for x in ocs_to_add]))
            if ocs_to_add & {'inetOrgPerson', 'organizationalPerson'}:
                serverctrls = [ldap.controls.simple.RelaxRulesControl()]

            if not has_kerberos_principal and not has_kerberos_kdcentry:
                ml.append(('krb5PrincipalName', [], [b'%s@%s' % (user['uid'][0], realm.encode('UTF-8'))]))

            if not has_kerberos_kdcentry:
                flags = b'254' if disabled else b'126'
                ml.extend([
                    ('krb5KeyVersionNumber', [], [b'1']),
                    ('krb5KDCFlags', [], [flags]),
                    ('krb5MaxLife', [], [b'86400']),
                    ('krb5MaxRenew', [], [b'604800']),
                ])

                if expiration_date:
                    ml.append(('krb5ValidEnd', [], [time.strftime("%Y%m%d000000Z", expiration_date).encode('ASCII')]))

                if sambaNTPassword:
                    ml.append(('krb5Key', [], self.nt_password_to_arcfour_hmac_md5(sambaNTPassword)))

                if password_end_date:
                    ml.append(('krb5PasswordEnd', [], [time.strftime("%Y%m%d000000Z", password_end_date).encode('ASCII')]))

            if not has_posix:
                uidNumber = self.allocate('uidNumber').encode('UTF-8')
                ml.extend([
                    ('uidNumber', [], [uidNumber]),
                    ('gidNumber', [], [primary_group_gid]),
                    ('homeDirectory', [], [b'/home/%s' % (user['uid'][0],)]),  # TODO: can this default value be overwritten by UCR?
                ])

            if not user.get('userPassword'):
                # Be nice and fix userPassword in the unlikely case that the attribute got lost but other credentials are present
                if user.get('krb5Key') or sambaNTPassword:
                    ml.append(('userPassword', [], b'{K5KEY}'))

            if not has_shadow:
                if expiration_date:
                    ml.append(('shadowExpire', [], [str(int(calendar.timegm(expiration_date)) / 3600 / 24).encode('ASCII')]))
                elif disabled:
                    ml.append(('shadowExpire', [], [b'1']))

                if password_set_date:
                    ml.append(('shadowLastChange', [], [str(int(calendar.timegm(password_set_date)) / 3600 / 24).encode('ASCII')]))

            if not has_samba:
                # FIXME: 'sambaNTPassword' if no kerberos user!
                if 'krb5Key' in user:
                    nt_password = self.arcfour_hmac_md5_to_nt_password(user['krb5Key'])
                    if nt_password:
                        ml.append(('sambaNTPassword', b'', [nt_password]))
                f = univention.admin.samba.acctFlags()
                if locked:
                    f.set('L')
                if disabled:
                    f.set('D')
                ml.extend([
                    ('sambaSID', [], [self.get_user_sid(user['uid'][0].decode('utf-8'), uidNumber.decode('UTF-8')).encode('UTF-8')]),
                    ('sambaAcctFlags', [], [f.decode()]),
                ])
                if password_set_date:
                    ml.append(('sambaPwdLastSet', [], [str(int(time.strftime('%s', password_set_date))).encode('ASCII')]))

            if ml:
                self.modify(dn, ml, serverctrls)
                self.confirm()

    def migrate_templates(self) -> None:
        for dn, attr in lo.search('(&(objectClass=univentionUserTemplate)(|(userOptionsPreset=groupware)(userOptionsPreset=kerberos)(userOptionsPreset=posix)(userOptionsPreset=samba)(userOptionsPreset=person)(userOptionsPreset=mail)))'):
            old = set(attr['userOptionsPreset'])
            new = old - {b'groupware', b'kerberos', b'posix', b'samba', b'person', b'mail'}
            if new != old:
                self.modify(dn, [('userOptionsPreset', list(old), list(new))])

    def nt_password_to_arcfour_hmac_md5(self, nt_password: bytes) -> bytes:
        # all arcfour-hmac-md5 keys begin this way
        key = b'0\x1d\xa1\x1b0\x19\xa0\x03\x02\x01\x17\xa1\x12\x04\x10'

        for i in range(16):
            o = nt_password[2 * i:2 * i + 2]
            char = chr(int(o, 16))
            if not isinstance(char, bytes):  # Python 3
                char = char.encode('latin-1')
            key += char
        return key

    def arcfour_hmac_md5_to_nt_password(self, ucs_krb5key: list[bytes]) -> bytes | None:
        for k in ucs_krb5key:
            (keyblock, _salt, _kvno) = heimdal.asn1_decode_key(k)

            enctype = keyblock.keytype()
            enctype_id = enctype.toint()
            if enctype_id == 23:
                krb5_arcfour_hmac_md5 = keyblock.keyvalue()
                return binascii.b2a_hex(krb5_arcfour_hmac_md5)

    def modify(self, dn: str, ml: list, serverctrls: list | None = None) -> None:
        self.modifications = True
        print('Modifying ', dn)
        pprint.pprint(ml)
        print()
        if not self.args.check:
            try:
                lo.modify(dn, ml, exceptions=True, serverctrls=serverctrls, ignore_license=True)
            except ldap.LDAPError as exc:
                self.exceptions.append((dn, ml, exc))

    def rename(self, dn: str, newdn: str, serverctrls: list | None = None) -> None:
        self.modifications = True
        print('Renaming', dn, 'to', newdn)
        if not self.args.check:
            try:
                lo.rename(dn, newdn, serverctrls=serverctrls, ignore_license=True)
            except ldap.LDAPError as exc:
                self.exceptions.append((dn, newdn, exc))

    def allocate(self, name: str, value: str | None = None) -> str:
        if name in ('userSid', 'groupSid'):
            if name == 'userSid':
                value = univention.admin.allocators.requestUserSid(lo, po, value)
            else:
                value = univention.admin.allocators.requestGroupSid(lo, po, value)
            name = 'sid'
        else:
            value = univention.admin.allocators.request(lo, po, name, value)
        self.alloc.append((name, value))
        return value

    def confirm(self) -> None:
        while self.alloc:
            name, value = self.alloc.pop()
            if self.args.check:
                univention.admin.allocators.release(lo, po, name, value)
            else:
                univention.admin.allocators.confirm(lo, po, name, value)

    def get_kerberos_realm(self) -> str:
        domain = univention.admin.uldap.domain(lo, po)
        realm = domain.getKerberosRealm()
        if not realm:
            if self.args.set_kerberos_realm:
                lo.modify(po.getBase(), [('krb5RealmName', None, self.args.set_kerberos_realm.encode('UTF-8'))], ignore_license=True)
            else:
                raise SystemExit('This domain has no kerberos realm defined. Please call this script with e.g. --set-kerberos-realm="%s".' % (ucr['domainname'].upper(),))
            realm = domain.getKerberosRealm()
        return realm

    def get_sambaMaxPwdAge(self) -> bytes | None:
        windows_domain = ucr.get('windows/domain')
        if not windows_domain:
            return
        for _dn, attr in lo.search(filter='(&(objectClass=sambaDomain)(sambaDomainName=%s))' % windows_domain, attr=['sambaMaxPwdAge']):
            return attr.get('sambaMaxPwdAge', [None])[0]  # pick the first match

    def get_primary_gid_number(self) -> int:
        for _dn, attr in lo.search(filter='(objectClass=univentionDefault)', base='cn=univention,' + po.getDomain(), attr=['univentionDefaultGroup']):
            primary_group = attr['univentionDefaultGroup'][0].decode('UTF-8')
            attr = lo.get(primary_group)
            if b'posixGroup' in attr.get('objectClass', []) and attr.get('sambaSID'):
                return attr['gidNumber'][0]
        raise SystemExit('No Samba and POSIX primary group could be found.')

    def get_user_sid(self, username: str, uidNumber: str) -> str:
        rid = rids_for_well_known_security_identifiers.get(username.lower())
        if rid:
            return self.__allocate_rid(rid)

        if self.s4connector_present:
            # In this case Samba 4 must create the SID, the s4 connector will sync the
            # new sambaSID back from Samba 4.
            return 'S-1-4-%s' % uidNumber

        sid: str | None = None
        num = uidNumber
        while not sid:  # TODO: deadlock forever?
            try:
                sid = self.allocate('userSid', num)
            except univention.admin.uexceptions.noLock:
                num = str(int(num) + 1)

        return sid

    def __allocate_rid(self, rid: str) -> str:
        domainsid = lo.search(filter='objectClass=sambaDomain', attr=['sambaSID'])[0][1]['sambaSID'][0].decode('UTF-8')
        sid = domainsid + '-' + rid
        try:
            userSid = self.allocate('sid', sid)
            self.alloc.append(('sid', userSid))
        except univention.admin.uexceptions.noLock:
            raise univention.admin.uexceptions.sidAlreadyUsed(rid)
        return userSid

    def get_group_sid(self, gidNum: int) -> str:
        if self.s4connector_present:
            # In this case Samba 4 must create the SID, the s4 connector will sync the
            # new sambaSID back from Samba 4.
            return 'S-1-4-%s' % gidNum

        sid: str | None = None
        num = gidNum
        while not sid:
            try:
                sid = self.allocate('groupSid', num)
            except univention.admin.uexceptions.noLock:
                num = str(int(num) + 1)
        return sid


# def get_all_must_attributes():
#    from ldap.schema import SubSchema, ObjectClass
#    import ldap
#    all_object_classes = {'posixAccount', 'shadowAccount', 'sambaSamAccount', 'krb5Principal', 'krb5KDCEntry', 'univentionMail', 'organizationalPerson', 'inetOrgPerson', 'pkiUser', 'simpleSecurityObject', 'uidObject', 'person', 'univentionPWHistory'}
#    entry = lo.lo.lo.search_ext_s(base='cn=Subschema', scope=ldap.SCOPE_BASE, attrlist=['attributeTypes', 'objectClasses'])[0][1]
#    subschema = SubSchema(entry)
#    ocs = [subschema.get_obj(ObjectClass, oid) for oid in subschema.listall(ObjectClass)]
#    return dict([(o.names[0], o.must) for o in ocs if set(o.names) & all_object_classes])
#    {
#        'inetOrgPerson': (),
#        'krb5KDCEntry': ('krb5KeyVersionNumber',),
#        'krb5Principal': ('krb5PrincipalName',),
#        'organizationalPerson': (),
#        'person': ('sn', 'cn'),
#        'pkiUser': (),
#        'posixAccount': ('cn', 'uid', 'uidNumber', 'gidNumber', 'homeDirectory'),
#        'sambaSamAccount': ('uid', 'sambaSID'),
#        'shadowAccount': ('uid',),
#        'simpleSecurityObject': ('userPassword',),
#        'uidObject': ('uid',),
#        'univentionMail': ('uid',),
#        'univentionPWHistory': ()
#    }


if __name__ == '__main__':
    Migration()
