#!/usr/bin/python3
#
# Univention Monitoring
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2004-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import os
import subprocess

from univention.monitoring import Alert


FAILED_LDIF_FN = '/var/lib/univention-directory-replication/failed.ldif'


class ReplicationCheck(Alert):

    def write_metrics(self):
        # CRITICAL if failed.ldif exists
        self.write_metric('univention_listener_failed_ldif_exists', 1 if os.path.exists(FAILED_LDIF_FN) else 0)

        # get actual transaction id
        try:
            result = subprocess.check_output(['/usr/share/univention-directory-listener/get_notifier_id.py'])
            notifier_id = int(result.decode("utf-8", "replace").rstrip())
        except (ValueError, subprocess.CalledProcessError) as exc:
            self.log.debug('Could not get notifier ID: %s', exc)
            self.write_metric('univention_listener_replication_difference', -1)  # FIXME:
            return

        try:
            with open('/var/lib/univention-directory-listener/notifier_id') as fd:
                listener_id = int(fd.read().rstrip())
        except (ValueError, OSError) as exc:
            self.log.debug('Could not get listener ID: %s', exc)
            self.write_metric('univention_listener_replication_difference', -1)  # FIXME:
            return

        self.write_metric('univention_listener_replication_difference', notifier_id - listener_id)


if __name__ == '__main__':
    ReplicationCheck.main()
