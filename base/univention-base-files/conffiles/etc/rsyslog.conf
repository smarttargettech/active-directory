@%@UCRWARNING=# @%@
# /etc/rsyslog.conf configuration file for rsyslog
#
# For more information install rsyslog-doc and see
# /usr/share/doc/rsyslog-doc/html/configuration/index.html

######################
#### Message size ####
######################
#
# Important: In order for this directive to work correctly,
# it must be placed right at the top of rsyslog.conf
# (before loading modules)
#
@!@
print('$MaxMessageSize %s' % (configRegistry.get("syslog/maxmessagesize", '4k'),))
@!@

#################
#### MODULES ####
#################

module(load="imuxsock") # provides support for local system logging
@!@
print('$SystemLogRateLimitInterval %s' % (configRegistry.get('syslog/limit/interval', '5'),))
print('$SystemLogRateLimitBurst %s' % (configRegistry.get('syslog/limit/burst', '200'),))
@!@
module(load="imklog")   # provides kernel logging support
#module(load="immark")  # provides --MARK-- message capability

@!@
from os.path import exists
for (typ, cfg) in [('udp', 'UDP'), ('tcp', 'InputTCP'), ('relp', 'InputRELP')]:
    print('# provides %s syslog reception' % (typ.upper(),))
    mod = '/usr/lib/x86_64-linux-gnu/rsyslog/im%s.so' % (typ,)
    port = configRegistry.get('syslog/input/%s' % (typ,))
    pfx = '' if port and exists(mod) else '#'
    print('%smodule(load="im%s")' % (pfx, typ))
    print('%sinput(type="im%s" port="%s")' % (pfx, cfg, port or 514))
    print("")
@!@

###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############

@!@
remote_list = [_f for _f in configRegistry.get('syslog/remote', '').split() if _f]
if remote_list:
    selector = configRegistry.get('syslog/remote/selector', '*.*')
    fallback_list = [_f for _f in configRegistry.get('syslog/remote/fallback', '').split() if _f]
    if any(server.startswith(':omrelp:') for server in remote_list + fallback_list):
        print('$ModLoad omrelp')
    for server in remote_list:
        print('%s	%s' % (selector, server))
        if fallback_list:
            print('$ActionExecOnlyWhenPreviousIsSuspended on')
            for fallback in fallback_list:
                print('&	%s' % (fallback,))
            print('$ActionExecOnlyWhenPreviousIsSuspended off')
@!@

#
# First some standard log files.  Log by facility.
#
@!@
duplicates = set()


def syslog(key, template, default=True):
    if configRegistry.is_true('syslog/%s' % (key,), default):
        print(template.strip())
        duplicates.add('%s.none' % (key,))
        return True


if syslog('auth', "auth,authpriv.*			/var/log/auth.log"):
    duplicates.add('authpriv.none')

syslog('cron', "cron.*				/var/log/cron.log")
# syslog('daemon', "daemon.*			-/var/log/daemon.log")
syslog('kern', "kern.*				-/var/log/kern.log")
syslog('lpr', "lpr.*				-/var/log/lpr.log")

if syslog('mail', "mail.*				-/var/log/mail.log") and configRegistry.is_true("syslog/mail/mirrorto/syslog", False):
    duplicates.discard('mail.none')

syslog('user', "user.*				-/var/log/user.log")
syslog('news', r"""
#
# Logging for INN news system.
#
news.crit			/var/log/news/news.crit
news.err			/var/log/news/news.err
news.notice			-/var/log/news/news.notice
""")

if configRegistry.is_true("syslog/syslog", True):
    selector = configRegistry.get('syslog/syslog/selector')
    if not selector:
        selectors = ['*.*', 'auth,authpriv.none']
        if configRegistry.is_true("syslog/syslog/avoid_duplicate_messages", False):
            selectors.extend(duplicates)
        elif configRegistry.is_false("syslog/mail/mirrorto/syslog", True):
            selectors.append('mail.none')
        selector = ';'.join(selectors)
    print("%s			-/var/log/syslog" % (selector,))
@!@


#
# Some "catch-all" log files.
#
@!@
# flake8: noqa
def syslog(key, selector, target, default=True):
    if configRegistry.is_true('syslog/%s' % (key,), default):
        selector = configRegistry.get('syslog/%s/selector' % (key,)) or selector.strip()
        print("%s		%s" % (selector, target))


print(r"""
#
# Emergencies are sent to everybody logged in.
#
*.emerg				:omusrmsg:*
""")
syslog('xconsole', r"""
daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn""", "|/dev/xconsole")
@!@
