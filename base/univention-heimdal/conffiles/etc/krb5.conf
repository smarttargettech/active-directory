@%@UCRWARNING=# @%@

[libdefaults]
@!@
# flake8: noqa
kerberos_realm = configRegistry.get('kerberos/realm') or 'UNIVENTION.UNCONFIGURED'

print('\tdefault_realm = %s' % kerberos_realm)

permitted_enctypes = 'aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96 arcfour-hmac-md5 des-cbc-crc des-cbc-md5 des-cbc-md4 des3-hmac-sha1 des3-cbc-sha1'
default_enctypes = configRegistry.get('kerberos/defaults/enctypes/permitted', permitted_enctypes)

# Set Heimdal options
print('\tdefault_etypes = %s' % default_enctypes)
default_tgs_etypes = configRegistry.get('kerberos/defaults/enctypes/tgs')
if default_tgs_etypes:
    print('\tdefault_tgs_etypes = %s' % default_tgs_etypes)
default_as_etypes = configRegistry.get('kerberos/defaults/enctypes/tkt')
if default_as_etypes:
    print('\tdefault_as_etypes = %s' % default_as_etypes)

if not configRegistry.is_false('kerberos/allow/weak/crypto'):
    print('\tallow_weak_crypto=true')
print('\tdns_lookup_kdc = %s' % configRegistry.get('kerberos/defaults/dns_lookup_kdc', 'true'))
print('\tdns_lookup_realm = %s' % configRegistry.get('kerberos/defaults/dns_lookup_realm', 'false'))
print('\tforwardable = %s' % configRegistry.get('kerberos/defaults/forwardable', 'true'))
print('\tproxiable = %s' % configRegistry.get('kerberos/defaults/proxiable', 'true'))
print('\tkdc_timesync = %s' % configRegistry.get('kerberos/defaults/kdc_timesync', '1'))
print('\tdebug = %s' % configRegistry.get('kerberos/defaults/debug', 'false'))

# Also set the MIT options, for compatibility
print('\t# ')
print('\t# The following libdefaults are for clients using the MIT Kerberos library')
print('\t# ')
print('\tpermitted_enctypes = %s' % default_enctypes)
print('\tdefault_tgs_enctypes = %s' % (default_tgs_etypes or permitted_enctypes))
print('\tdefault_tkt_enctypes = %s' % (default_as_etypes or permitted_enctypes))
if configRegistry.is_true('kerberos/defaults/ignore_acceptor_hostname'):
    print('\tignore_acceptor_hostname = true')
if configRegistry.is_false('kerberos/defaults/rdns'):
    print('\trdns = false')
if configRegistry.get('kerberos/defaults/ticket-lifetime'):
    print('\tticket_lifetime = %sh' % configRegistry.get('kerberos/defaults/ticket-lifetime'))
print('')


def is_samba4_dc():
    import os.path
    if configRegistry.get('server/role') not in ['domaincontroller_master', 'domaincontroller_backup', 'domaincontroller_slave']:
        return False
    if not os.path.exists('/usr/sbin/univention-s4search'):
        return False
    return True


if configRegistry.get('kerberos/domain_realms'):
    print('[domain_realm]')
    domain_realms = configRegistry.get('kerberos/domain_realms').split(',')
    for i in domain_realms:
        print(i)

kerberos_kdc = configRegistry.get('kerberos/kdc')
kerberos_adminserver = configRegistry.get('kerberos/adminserver')
kerberos_kpasswdserver = configRegistry.get('kerberos/kpasswdserver')
print('[realms]')
print('%s = { ' % kerberos_realm)
print('\tacl_file = /var/lib/heimdal-kdc/kadmind.acl')
if kerberos_kdc:
    print('\tkdc = %s' % kerberos_kdc)
if kerberos_adminserver:
    print('\tadmin_server = %s' % kerberos_adminserver)
if kerberos_kpasswdserver:
    print('\tkpasswd_server = %s' % kerberos_kpasswdserver)
print('}')

windows_domain = configRegistry.get('windows/domain')
if windows_domain and windows_domain != kerberos_realm and is_samba4_dc():
    if configRegistry.get('kerberos/realm'):
        print('')
    else:
        print('[realms]')
    print('%s = { ' % windows_domain)
    print('\tkdc = %s' % (kerberos_kdc or "127.0.0.1:88"))
    print('\tadmin_server = %s' % (kerberos_adminserver or "127.0.0.1:88"))
    print('\tdefault_domain = %s' % configRegistry['domainname'])
    print('}')

print('''[kdc]
hdb-ldap-create-base = cn=kerberos,%(ldap_base)s
v4-realm = %(kerberos_realm)s
''' % {"ldap_base": configRegistry['ldap/base'], "kerberos_realm": kerberos_realm})

print('[kadmin]')
if configRegistry.get('kerberos/kadmin/default/keys'):
    print('\tdefault_keys = %s' % configRegistry.get('kerberos/kadmin/default/keys'))
print('\tv4-realm = %s' % kerberos_realm)
if configRegistry.get('kerberos/afscell'):
    print('\tafs-cell = %s' % configRegistry.get('kerberos/afscell'))

print('''database = {
	label = {
		acl_file = /var/lib/heimdal-kdc/kadmind.acl
		dbname = ldap:%(ldap_base)s
		realm = %(kerberos_realm)s''' % {
    "ldap_base": configRegistry['ldap/base'],
    "kerberos_realm": kerberos_realm})  # noqa: E101
@!@
		log_file = /var/log/heimdal-database.log
		mkey_file = /var/heimdal/m-key
	}
}
