#!/bin/bash
#
# Univention Grub
#  postinst script
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2004-2025 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

db_get () {
	RET=$(debconf-communicate <<<"get $1")
	RET="${RET#0 }"
}
db_set () {
	debconf-communicate <<<"set $1 $2"
}

#DEBHELPER#

eval "$(univention-config-registry shell)"

# shellcheck source=/dev/null
. /usr/share/univention-lib/ucr.sh

# update to 5.0
if [ "$1" = configure ] && dpkg --compare-versions "${2:-}" lt-nl 13.0.0-4; then
	if [ "$(ucr get grub/color/normal)" = "black/black" ] &&
		[ "$(ucr get grub/color/highlight)" = "white/green" ] &&
		[ "$(ucr get grub/menu/color/normal)" = "black/black" ] &&
		[ "$(ucr get grub/menu/color/highlight)" = "white/green" ]; then
		ucr unset grub/color/normal grub/color/highlight grub/menu/color/normal grub/menu/color/highlight
	fi
fi

gfxmode="800x600@16"
# grub menu is invisibal in xen HVM unless text mode is used
if dmesg | grep -q "Hypervisor detected: Xen HVM"; then
	gfxmode="text"
fi

# Bug #24858: xen-4.1 needs 800x600
univention-config-registry set grub/timeout?5 \
	grub/quiet?"yes"  \
	grub/loglevel?"0" \
	grub/gfxmode?"$gfxmode" \
	grub/gfxpayload?"800x600@24,800x600@16,800x600" \
	grub/backgroundimage?"/boot/grub/uniboot.png"

# grub needs to read the file unicode.pf2 for gfxmode,
# /usr/share/grub/unicode.pf2 is the default, but /
# can be on a fs grub can't read (cryptsetup), so
# /boot/grub/unicode.pf2 is better
if [ ! -f /boot/grub/unicode.pf2 ] && [ -f /usr/share/grub/unicode.pf2 ]; then
	cp /usr/share/grub/unicode.pf2 /boot/grub/unicode.pf2
fi

# Install grub on new installation
if [ "$1" = configure ] && [ -z "$2" ];  then
	# invoke grub-mkdevicemap (required for KVM machines)
	grub-mkdevicemap

	update-grub
fi

if [ "$1" = configure ] && dpkg-query -W -f '${Status}' grub-pc | grep -qs '^install'
then # Bug 40654
	mountpoint_to_disk_device () {
		local device major minor low16
		device="$(mountpoint -d "$1")"
		major="$(printf '%x' "${device%:*}")"
		minor="$(printf '%02x' "${device#*:}")"
		# disc device is partition device AND 0xf0
		low16="${minor%?}"
		find /dev -mindepth 1 -maxdepth 1 -type b -exec stat -c '%n %t %T' {} + |
			grep "^.* $major $low16$" |
			cut -d' ' -f 1
	}

	echo "Checking grub-pc/install_devices for errors..."
	boot_device="$(mountpoint_to_disk_device '/boot')"
	echo "Boot device guessed as '$boot_device'."
	case "$boot_device" in
		/dev/md*)
			echo "Boot device '$boot_device' is a RAID device, detection is wrong."
			boot_device=""
		;;
		/dev/dm-*)
			echo "Boot device '$boot_device' is a LVM device, detection is wrong."
			boot_device=""
		;;
	esac
	output_devices=""
	missing_devices=0 # are any devices in grub-pc/install_devices missing/wrong?
	have_no_devices=1 # are there no devices in grub-pc/install_devices at all?
	boot_device_missing=1 # is the $boot_device in grub-pc/install_devices?
	db_get "grub-pc/install_devices"
	echo "Currently grub-pc/install_devices is set to '$RET'"
	for i in ${RET//, / }
	do
		real_device="$(readlink -f "$i")"
		echo "Checking '$real_device'..."
		if [ "$real_device" = "$boot_device" ]
		then
			echo "This is the boot device '$boot_device'."
			boot_device_missing=0
		fi
		if [ -b "$real_device" ] # exists and is block special
		then
			echo "The device '$real_device' exists."
			if [ -n "$output_devices" ]
			then
				output_devices="$output_devices, $real_device"
			else
				output_devices="$real_device"
			fi
		else
			echo "The device '$real_device' is MISSING, removing."
			missing_devices=1
		fi
		have_no_devices=0
	done
	if [ "$have_no_devices" -ne 0 ]
	then
		echo "There are no devices at all in grub-pc/install_devices."
	fi
	if [ "$boot_device" = '' ]
	then
		echo "The boot device is unknown."
	else
		if [ "$boot_device_missing" -ne 0 ]
		then
			echo "The boot device '$boot_device' is NOT in grub-pc/install_devices."
			if [ "$have_no_devices" -ne 0 ]
			then
				echo "Adding boot device '$boot_device' because there are no devices at all."
				if [ -n "$output_devices" ]
				then
					output_devices="$output_devices, $boot_device"
				else
					output_devices="$boot_device"
				fi
			fi
			if [ "$missing_devices" -ne 0 ]
			then
				echo "Adding boot device '$boot_device' because there were some wrong devices."
				if [ -n "$output_devices" ]
				then
					output_devices="$output_devices, $boot_device"
				else
					output_devices="$boot_device"
				fi
			fi
		else
			echo "The boot device IS in grub-pc/install_devices."
		fi
	fi
	db_get "grub-pc/install_devices"
	echo "Currently grub-pc/install_devices is set to '$RET'"
	if [ "$RET" = "$output_devices" ]
	then
		echo "No changes were made."
		echo "grub-pc/install_devices will not be changed."
		echo "Will not run grub-install."
	else
		echo "Some changes were made."
		if [ "$output_devices" = '' ]
		then
			echo "grub-pc/install_devices will NOT be set to '$output_devices'."
		else
			echo "grub-pc/install_devices will be set to '$output_devices'."
			echo "Running grub-install..."
			db_set "grub-pc/install_devices" "$output_devices"
			db_get "grub-pc/install_devices"
			echo "Currently grub-pc/install_devices is set to '$RET'"
			for i in ${RET//, / }
			do
				real_device="$(readlink -f "$i")"         # from grub-pc.postinst
				echo "Running grub-install on '$real_device'"
				grub-install "$real_device"
			done
		fi
	fi
	echo "Done checking grub-pc/install_devices for errors."
fi
if ! grep -Fxq dm-mod /etc/initramfs-tools/modules
then
	echo "LVM kernel module 'dm-mod' is missing in initrd - recreating initrd"
	{
		echo "dm-mod"
		echo "dm-mirror"
		echo "dm-snapshot"
	} >> /etc/initramfs-tools/modules
	update-initramfs -u -t -k all
fi

# Bug #51984: update to 5.0 or new installation
if [ "$1" = configure ] &&
	dpkg --compare-versions "${2:-}" lt 13.0.0-6 &&
	mountpoint -q /boot/efi &&
	[ ! -f /boot/efi/EFI/debian/grub.cfg ]
then
	install -d /boot/efi/EFI/debian
	echo 'configfile /efi/univention/grub.cfg' >/boot/efi/EFI/debian/grub.cfg
fi

exit 0
