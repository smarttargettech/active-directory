@%@UCRWARNING=# @%@

# You can set limits by setting univention-config-registry variables of the following format:
#   security/limits/<scope>/<name>/<type>/<item>=<value>
# where <scope> is either 'user' or 'group',
# <name> is the name of the user or group to be affected, or '*' to define the default,
# <type> is either 'hard' or 'soft' or '-' for both,
# and <item> is what is to be limited.
#
# Examples:
#   $ univention-config-registry set 'security/limits/group/Domain Users/hard/nproc'=1000
#   $ univention-config-registry set 'security/limits/default/user/hard/nice'=-5
#
# See also the manpage for limits.conf:
# $ man 5 limits.conf

@!@
from univention.lib.misc import custom_username, custom_groupname

PREFIX = 'security/limits/'
output = [('# <domain>', '<type>', '<item>', '<value>')]
for key in configRegistry:
    if not key.startswith(PREFIX):
        continue
    parts = key[len(PREFIX):]
    parts = parts.split('/')
    if len(parts) != 4:
        continue
    (scope, name, type, item) = parts
    if scope == 'user':
        scope = ''
        name = custom_username(name)
    elif scope == 'group':
        scope = '@'
        name = custom_groupname(name)
    elif scope == 'default':
        if name == 'user':
            name = '*'
            scope = ''
        if name == 'group':
            print('# Invalid variable "%s"\n# <name> must be "user" for "default" <scope>, not "%s"\n#' % (key, type))
            continue
    else:
        print('# Illegal variable "%s"\n# <scope> must be "user", "group" or "default", not "%s"\n#' % (key, type))
        continue
    if type not in ('soft', 'hard', '-'):
        print('# Illegal variable "%s"\n# <type> must be "soft", "hard" or "-", not "%s"\n#' % (key, type))
        continue
    if name == '*':
        scope = ''
    # TODO: Validate item?
    # TODO: Validate value?
    # TODO: What about '"' in name?
    if ' ' in name or '\t' in name:
        name = '"%s"' % name
    output.append(('%s%s' % (scope, name), type, item, configRegistry[key]))

lengths = [0, 0, 0, 0]
for entry in output:
    for i in range(3):  # 3 == do not adjust last entry
        if lengths[i] < len(entry[i]):
            lengths[i] = len(entry[i])

for entry in output:
    print(' '.join(entry[i].ljust(lengths[i] + 2) for i in range(4)))
@!@
# End of file
