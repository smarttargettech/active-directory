.\"                                      Hey, EMACS: -*- nroff -*-
.TH UNIVENTION-INSTALL-CONFIG-REGISTRY 1 2012-08-01 UCS

.SH NAME
univention\-install\-config\-registry \- install UCR template files into package build directories

.SH SYNOPSIS
.B univention\-install\-config\-registry

.SH DESCRIPTION
.B univention\-install\-config\-registry
is a debhelper like program that is responsible for installing template files using univention config registry (UCR) variables.

.SH FILES
.TP
debian/\fIpackage\fP.univention\-config\-registry
Describe the files of the package to install as UCR templates.
The file itself is installed in \fI/etc/univention/templates/info/*.info\fP.
.TP
debian/\fIpackage\fP.univention\-config\-registry\-mapping
Lists pairs of LDAP attribute names and UCR variable names. Each pair should be put on its own line, separated by a single equal sign ("\fB=\fP").
This mapping is used by
.BR univention_policy_result (1)
to map values defined through policies from their LDAP name to a corresponding UCR variable.
The file itself is installed in \fI/etc/univention/templates/mapping/*.univention-config-registry-mapping\fP.
.TP
conffiles/\fI*\fP
The templates files, modules, and scripts referenced from the
\fIdebian/*.univention\-config\-registry\fP files are installed to
\fI/etc/univention/templates/files/\fP,
\fI/etc/univention/templates/modules/\fP, and
\fI/etc/univention/templates/scripts/\fP, respectively.

.SH EXAMPLES
A
.I univention\-config\-registry
file consists of multiple entries separated by one blank line.
Each entry may have one of the following formats:
.SS Single file
Each time one of the listed UCR variables gets changed, the File will be re-created.
.RS 5
.nf
\fBType: file\fP
\fBFile:\fP \fIetc/file_name\fP
\fBVariables:\fP \fIvariable_name\fP [OPTIONAL]
\fBPreinst:\fP \fIname_of_module_in_/etc/univention/templates/modules/\fP [OPTIONAL]
\fBPostinst:\fP \fIname_of_module_in_/etc/univention/templates/modules/\fP [OPTIONAL]
\fBUser:\fP \fIuser_name\fP [OPTIONAL]
\fBGroup:\fP \fIgroup_name\fP [OPTIONAL]
\fBMode:\fP \fIoctal_file_mode\fP [OPTIONAL]
\fBEncode-utf8:\fP \fBtrue\fP|\fByes\fP [DEPRECATED]
.fi
.RE
.P
The template file is scanned for variable substitutions using the \fB@%@\fP\fIvariable\fP\fB@%@\fP syntax, which are automatically registered with this entry.
Additional variables can be explicitly registered using the \fBVariables\fP statement, one variable per statement.
Multiple variables can be matched using Python regular expressions.
.P
If \fBPreinst\fP und \fBPostinst\fP are used, the module must implement the following Python functions:
.RS 5
.nf
def preinst(config_registry, changes):
    """Called before the update.
    'config_registry' is an instance of univention.config_registry.ConfigRegistry, which contains the updated values.
    'changes' is a dictionary mapping the name of changed variables to a 2-tuple (old-value, new-value).
    """

def postinst(config_registry, changes):
    """Called after the update.
    'config_registry' is an instance of univention.config_registry.ConfigRegistry, which contains the updated values.
    'changes' is a dictionary mapping the name of changed variables to a 2-tuple (old-value, new-value).
    """
.fi
.RE
.P
If a script \fI/etc/univention/templates/scripts/$full_path_to_file\fP exists, it will be called after the file has been created from the template.
The script is called with the argument \fBpostinst\fP and receives the list of changes as \fIkey\fP\fB@%@\fP\fIold_value\fP\fB@%@\fP\fInew_value\fP on standard input.

.SS Multi file
Each time one of the listed UCR variables gets changed, the Multifile will be re-created by concatenating the Subfiles in order.
.RS 5
.nf
\fBType: multifile\fP
\fBMultifile:\fP \fIetc/name_of_aggregating_file\fP
\fBVariables:\fP \fIvariable_name\fP [OPTIONAL]
\fBPreinst:\fP \fIname_of_module_in_/etc/univention/templates/modules/\fP [OPTIONAL]
\fBPostinst:\fP \fIname_of_module_in_/etc/univention/templates/modules/\fP [OPTIONAL]
\fBUser:\fP \fIuser_name\fP [OPTIONAL]
\fBGroup:\fP \fIgroup_name\fP [OPTIONAL]
\fBMode:\fP \fIoctal_file_mode\fP [OPTIONAL]
\fBEncode-utf8:\fP \fBtrue\fP|\fByes\fP [DEPRECATED]

\fBType: subfile\fP
\fBMultifile:\fP \fIetc/name_of_aggregating_file\fP
\fBSubfile:\fP \fIetc/00name_of_partial_file\fP
.fi
.RE
.P
If \fBPreinst\fP und \fBPostinst\fP are used, see the description above for which Python functions the module must implement.
.P
The sub-template files are scanned for variable substitutions using the \fB@%@\fP\fIvariable\fP\fB@%@\fP syntax, which are automatically registered with the multifile entry.
Additional variables can be explicitly registered using the \fBVariables\fP statement, one variable per statement.
Multiple variables can be matched using Python regular expressions.
.fi
.RE
.P
If a script \fI/etc/univention/templates/scripts/$full_path_to_file\fP exists, it will be called after the multifile has been created from the template.
The script is called with the argument \fBpostinst\fP and receives the list of changes as \fIkey\fP\fB@%@\fP\fIold_value\fP\fB@%@\fP\fInew_value\fP on standard input.

.SS Script file
Each time one of the listed UCR variables gets changed, the script will be executed with the argument \fBgenerate\fP.
.RS 5
.nf
\fBType: script\fP
\fBScript:\fP \fIname_of_executable_in_/etc/univention/templates/scripts/\fP
\fBVariables:\fP \fIvariable_name\fP
.fi
.RE
.P
Variables to trigger the script must be explicitly registered using the \fBVariables\fP statement, one variable per statement.
Multiple variables can be matched using Python regular expressions.
.P
The script receives the list of changes as \fIkey\fP\fB@%@\fP\fIold_value\fP\fB@%@\fP\fInew_value\fP on standard input.

.SS Module
Each time one of the listed UCR variables gets changed, the Python module will be executed.
.RS 5
.nf
\fBType: module\fP
\fBModule:\fP \fIname_of_module_in_/etc/univention/templates/modules/\fP
\fBVariables:\fP \fIvariable_name\fP
.fi
.RE
.P
Variables to trigger the module must be explicitly registered using the \fBVariables\fP statement, one variable per statement.
Multiple variables can be matched using Python regular expressions.
.P
The module should implement the following Python function:
.RS 5
.nf
def handler(config_registry, changes):
    """Called to do the update.
    'config_registry' is an instance of univention.config_registry.ConfigRegistry.
    'changes' is a dictionary mapping the name of changed variables to a 2-tuple (old-value, new-value).
    """
.fi
.RE

.SH NOTES
Note that this command is not idempotent.
.BR dh_prep (1)
should be called between invocations of this command.
Otherwise, it may cause multiple instances of the same text to be added to maintainer scripts.

.SH BUGS
File names must not start with the leading slash, they should be relative to \fI/\fP.

.SH ENVIRONMENT
.IP "\s-1DH_VERBOSE\s0" 4
Set to 1 to enable verbose mode.
Debhelper will output every command it runs that modifies files on the build system.

.SH SEE ALSO
.BR univention\-install\-config\-registry\-info (1),
.BR univention\-install\-service\-info (1),
.BR debhelper (7).
.br
This program is documented fully in the
.IR "Univention Corporate Server Manual" .

.SH AUTHOR
Copyright (c) 2011-2025 Univention GmbH, Germany
