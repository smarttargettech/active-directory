# This is the Univention Corporate Server 5 plymouth plugin script

# internal status
status = "normal";

# to determine the mode of operation plymouth was started in use Plymouth.GetMode
# which returns a string of one of: "boot", "shutdown", "suspend", "resume" or unknown.
#status = Plymouth.GetMode();

##########
# helper #
##########

# remove spaces on the beginning of string
fun trim(string) {

	local.str = String(string);
	local.ret = "";
	local.index = 0;
	local.beginning = 1;

	while (str.CharAt(index)) {
		if (str.CharAt(index) == " " && beginning) {
			beginning = 1;
		}
		else {
			ret = ret + str.CharAt(index);
			beginning = 0;
		}
		index++;
	}

	return ret;
}

# return True is string starts with substring
fun stringStartsWith(string, substring) {

	local.index = 0;
	while (substring.CharAt(index)) {
		if ((!string.CharAt(index)) || (substring.CharAt(index) != string.CharAt(index))) {
			return NULL;
		}
		index++;
	}
	return 1;
}

# wrap line to size
fun textWrapToSize(string, size, font) {

	local.ret = "";
	local.index = 0;
	local.tmp = "";
	local.image;
	while (string.CharAt(index)) {
		tmp += string.CharAt(index);
		image = Image.Text(tmp, 0, 0, 0, 0, font);
		if (image.GetWidth() > size - 20 && string.CharAt(index) == " ") {
			ret += tmp;
			ret += "\n";
			tmp = "";
		}
		index++;
	}
	if (tmp) {
		ret += tmp;
	}
	return ret;
}

# wrap line to list of lines with maxChar
fun StringToList(string, maxChar) {

	if (!maxChar) maxChar = 10;
	local.index = 0;
	local.str = String(string);
	local.list = [];
	local.listPos = 0;
	local.substring = "";
	local.length = 0;
	local.split = 0;

	while (str.CharAt(index)) {

		length = StringLength(substring);

		# respect \n
		if (str.CharAt(index) == "\\" && str.CharAt(index + 1) && str.CharAt(index + 1) == "n") {
			index++;
			split = 1;
		}
		if (str.CharAt(index) == "\n") {
			split = 1;
		}


		if (length > maxChar - 4 && str.CharAt(index) == " ")
			split = 1;

		if (split) {
			list[listPos] = trim(substring);
			listPos++;
			substring = "";
			split = 0;
		}
		else {
			substring = substring + str.CharAt(index);
		}
		index++;
	}

	list[listPos] = trim(substring);
	return list;
}

# return the length of a string
fun StringLength(string) {
	local.index = 0;
	str = String(string);
	while(str.CharAt(index)) index++;
	return index;
}

# This is the equivalent for strstr()
fun StringString(string, substring) {
	start = 0;
	while (String(string).CharAt (start)) {
		walk = 0;
		while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
			walk++;
			if (!String(substring).CharAt (walk)) return start;
		}
		start++;
	}
	return NULL;
}

fun StringCopy (source, beginning, end) {
	local.destination = "";
	for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
		local.destination += String(source).CharAt(index);
	}
	return local.destination;
}

# it makes sense to use it only for
# numbers up to 150
fun StringToInteger (str) {
	int = -1;
	for (i=0; i<=150; i++) {
		if (i+"" == str) {
			int = i;
			break;
		}
	}
	return int;
}

fun StringToFloat (str) {
	int = 0;
	multiplier = 1;
	for (i=StringLength(str) - 1; i>=0; i--) {
		if (str.CharAt(i) == ".") {
			int = int / multiplier;
			multiplier = 1;
		} else {
			int += StringToInteger(str.CharAt(i)) * multiplier;
			multiplier = multiplier * 10;
		}
	}
	return int;
}

fun width_percent(percent) {
	return ((percent * Window.GetWidth()) / 100);
}

fun height_percent(percent) {
	return ((percent * Window.GetHeight()) / 100);
}

fun text_to_image(text, color, font, alignment) {
	if (color == NULL) {
		color = text_color;
	}
	if (font == NULL) {
		font = text_font;
	}
	if (alignment == NULL) {
		alignment = text_alignment;
	}
	return Image.Text(text, color.red, color.green, color.blue, 1, font, alignment);
}

# Settings
text_font = "Open Sans, 11";
text_font_heading = "Open Sans Light, 26";
text_font_ip = "Open Sans Semibold, 11";
text_alignment = "center";

# set these colors in the coresponding *.plymouth file under [script-env-vars]
# sane input like '0.10' is expected
text_color.red = StringToFloat(setting_text_color_red);
text_color.green = StringToFloat(setting_text_color_green);
text_color.blue = StringToFloat(setting_text_color_blue);
text_color_light.red = StringToFloat(setting_text_color_light_red);
text_color_light.green = StringToFloat(setting_text_color_light_green);
text_color_light.blue = StringToFloat(setting_text_color_light_blue);
background_color.red = StringToFloat(setting_background_color_red);
background_color.green = StringToFloat(setting_background_color_green);
background_color.blue = StringToFloat(setting_background_color_blue);

# set background color
Window.SetBackgroundTopColor(background_color.red, background_color.green, background_color.blue);
Window.SetBackgroundBottomColor(background_color.red, background_color.green, background_color.blue);

# box image
box.image = Image("logo-box.png").Scale(320, 320);
box.sprite = Sprite(box.image);
box.sprite.SetOpacity(0.0);
box.sprite.SetX(Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth()  / 2);
box.sprite.SetY(Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight() / 2);

# animantion
for (i=0; i<=47; i++) {
	logo[i].image = Image("logo" + i + ".png").Scale(320, 320);
}
logo.sprite = Sprite(logo[0].image);
logo.sprite.SetOpacity(1.0);
logo.sprite.SetX(box.sprite.GetX());
logo.sprite.SetY(box.sprite.GetY());
logo.count = 0;
logo.index = 0;
logo.text.sprite = Sprite();
logo.text.setText = fun (string) {
	logo.text.image = text_to_image(textWrapToSize(string, logo[0].image.GetWidth() - 100, text_font));
	logo.text.sprite.SetPosition(logo.sprite.GetX() + (logo[0].image.GetWidth() - logo.text.image.GetWidth()) / 2, logo.sprite.GetY() + 218, 100);
	logo.text.sprite.SetImage(logo.text.image);
};

# univention logo
univention.image = Image("powered-by-univention.png");
univention.sprite = Sprite(univention.image);
univention.sprite.SetX(Window.GetX() + Window.GetWidth() - width_percent(6) - univention.image.GetWidth());
univention.sprite.SetY(height_percent(7));

# ask-question dialog
ASK_PROMPT_LINES = 15;
question.font = "Sans 13";
fun ask_dialog() {

	local.text;
	local.prompt = [];

	for (i=0; i < ASK_PROMPT_LINES; i++) {
		prompt[i].sprite = Sprite();
		prompt[i].sprite.SetPosition(10, 50 + (20 * i), 10000);
	}

	prompt.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.ask.prompt;
		local.list = StringToList(string, 80);
		local.msg;
		for (i=0; i < ASK_PROMPT_LINES; i++) {
			if (list[i]) {
				prompt[i].image = Image.Text(list[i], 0.4, 0.4, 0.4, 1, question.font);
				prompt[i].sprite.SetImage(prompt[i].image);
				prompt.x = prompt[i].sprite.GetX();
				prompt.y = prompt[i].sprite.GetY();
			}
			else {
				prompt[i].image = Image.Text("", 0, 0, 0, 1, question.font);
				prompt[i].sprite.SetImage(prompt[i].image);
			}
		}
	};

	text.sprite = Sprite();
	text.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.ask.prompt;
		string = "-> " + string;
		local.text = global.ask.text;
		text.image = Image.Text(string, 0.4, 0.4, 0.4, 1, question.font);
		text.sprite.SetImage(text.image);
		text.sprite.SetOpacity(0.75);
		text.sprite.SetPosition(
			prompt.x,
			prompt.y + 20,
			10000
		);
	};

	global.ask.prompt = prompt;
	global.ask.text = text;
	ask_opacity(1);
}

# ask password dialog
PASSWORD_PROMPT_LINES = 6;
password.font = "Sans 13";
fun dialog_setup() {

	local.lock;
	local.entry;
	local.prompt;

	lock.image = Image("lock.png");
	entry.image = Image("entry.png");

	lock.sprite = Sprite(lock.image);
	lock.x = Window.GetX() + Window.GetWidth()  / 2 - lock.image.GetWidth() / 2;
	lock.y = Window.GetY() + Window.GetHeight() / 2 - global.box.image.GetHeight() / 3;
	lock.z = 10000;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);

	entry.sprite = Sprite(entry.image);
	entry.x = Window.GetX() + Window.GetWidth()  / 2 - entry.image.GetWidth() / 2;
	entry.y = Window.GetY() + Window.GetHeight() / 2 - entry.image.GetHeight() / 2;
	entry.z = lock.z + 1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);

	for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
		prompt[i] = Sprite();
		prompt[i].SetPosition(10, 50 + (20 * i), 10000);
	}

	prompt.setText = fun (string) {
		if (!string) string = "";
		local.prompt = global.dialog.prompt;
		local.list = StringToList(string, 80);
		local.msg;
		for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
			if (!list[i]) list[i] = "";
			msg = Image.Text(list[i], 0.4, 0.4, 0.4, 1, password.font);
			prompt[i].SetImage(msg);
		}
	};

	global.dialog.lock = lock;
	global.dialog.entry = entry;
	global.dialog.prompt = prompt;
	global.dialog.bullet_image = Image("bullet.png");
	dialog_opacity (1);
}

# disable|enable password dialog
fun dialog_opacity(opacity) {

	global.box.sprite.SetOpacity(opacity);
	dialog.lock.sprite.SetOpacity(opacity);
	dialog.entry.sprite.SetOpacity(opacity);
	for (index = 0; dialog.bullet[index]; index++) {
		dialog.bullet[index].sprite.SetOpacity(opacity);
	}
	for (i=0; i < PASSWORD_PROMPT_LINES; i++) {
		global.dialog.prompt[i].SetOpacity (opacity);
	}
}

# disable|enable ask question dialog
fun ask_opacity(opacity) {

	global.ask.text.sprite.SetOpacity(opacity);
	for (i=0; i < ASK_PROMPT_LINES; i++) {
		global.ask.prompt[i].sprite.SetOpacity(opacity);
	}
}

fun normal_opacity(opacity) {
	global.logo.sprite.SetOpacity(opacity);
	global.logo.text.sprite.SetOpacity(opacity);
	global.message.sprite.SetOpacity(opacity);
	global.message_action.sprite.SetOpacity(opacity);
	global.statusmsg.sprite.SetOpacity(opacity);
}

# normal screen
fun normal_setup() {
	if (global.dialog) dialog_opacity (0);
	if (global.ask) ask_opacity (0);
	if (global.welcome) welcome_screen_opacity(0);
	normal_opacity(1);
}



##################
# Welcome Screen #
##################

fun welcome_screen_opacity(opacity) {
	global.welcome.header.sprite.SetOpacity(opacity);
	global.welcome.hostname.sprite.SetOpacity(opacity);
	global.welcome.logo1.sprite.SetOpacity(opacity);
	global.welcome.logo2.sprite.SetOpacity(opacity);
	global.welcome.logo3.sprite.SetOpacity(opacity);
	global.welcome.number1.sprite.SetOpacity(opacity);
	global.welcome.number2.sprite.SetOpacity(opacity);
	global.welcome.number3.sprite.SetOpacity(opacity);
	global.welcome.message1.sprite.SetOpacity(opacity);
	global.welcome.message2.sprite.SetOpacity(opacity);
	global.welcome.message3.sprite.SetOpacity(opacity);
	global.welcome.arrow1.sprite.SetOpacity(opacity);
	global.welcome.arrow2.sprite.SetOpacity(opacity);
	global.welcome.console.sprite.SetOpacity(opacity);
	global.welcome.address.sprite.SetOpacity(opacity);
	global.welcome.addresses.sprite.SetOpacity(opacity);
}

fun welcome_screen_setup() {

	# disable everything else
	if (global.dialog) dialog_opacity (0);
	if (global.ask) ask_opacity (0);
	normal_opacity(0);

	# logo step2
	logo2.image = Image("logo-step2.png");
	logo2.sprite = Sprite(logo2.image);
	logo2.sprite.SetOpacity(1);
	logo2.sprite.SetX(width_percent(50) - logo2.image.GetWidth() / 2);
	logo2.sprite.SetY(height_percent(50) - logo2.image.GetHeight() / 2);
	global.welcome.logo2 = logo2;

	# number step2
	number2.image = Image("number2.png");
	number2.sprite = Sprite(number2.image);
	number2.sprite.SetOpacity(1);
	number2.sprite.SetX(logo2.sprite.GetX() + (logo2.image.GetWidth() / 2) - number2.image.GetWidth() / 2);
	number2.sprite.SetY(height_percent(50) - 81 - number2.image.GetHeight());
	global.welcome.number2 = number2;

	# message step2
	message2.sprite = Sprite();
	message2.sprite.SetY(height_percent(50) + 97);
	message2.setText = fun (string) {
		global.welcome.message2.image = text_to_image(textWrapToSize(string, global.welcome.logo2.image.GetWidth()));
		global.welcome.message2.sprite.SetX(global.welcome.logo2.sprite.GetX() + (global.welcome.logo2.image.GetWidth() - global.welcome.message2.image.GetWidth()) / 2);
		global.welcome.message2.sprite.SetImage(global.welcome.message2.image);
	};
	global.welcome.message2 = message2;

	# logo step1
	logo1.image = Image("logo-step1.png");
	logo1.sprite = Sprite(logo1.image);
	logo1.sprite.SetOpacity(1);
	logo1.sprite.SetX(logo2.sprite.GetX() - 102 - logo1.image.GetWidth());
	logo1.sprite.SetY(logo2.sprite.GetY() - logo1.image.GetHeight() / 2 + logo2.image.GetHeight() / 2);
	logo1.sprite.SetZ(1);
	global.welcome.logo1 = logo1;

	# number step1
	number1.image = Image("number1.png");
	number1.sprite = Sprite(number1.image);
	number1.sprite.SetOpacity(1);
	number1.sprite.SetX(logo1.sprite.GetX() + (logo1.image.GetWidth() / 2) - number1.image.GetWidth() / 2);
	number1.sprite.SetY(number2.sprite.GetY());
	global.welcome.number1 = number1;

	# message step1
	message1.sprite = Sprite();
	message1.sprite.SetY(message2.sprite.GetY());
	message1.setText = fun (string) {
		global.welcome.message1.image = text_to_image(textWrapToSize(string, global.welcome.logo1.image.GetWidth(), text_font));
		global.welcome.message1.sprite.SetX(global.welcome.logo1.sprite.GetX() + (global.welcome.logo1.image.GetWidth() - global.welcome.message1.image.GetWidth()) / 2);
		global.welcome.message1.sprite.SetImage(global.welcome.message1.image);
	};
	global.welcome.message1 = message1;

	# welcome screen header
	header.sprite = Sprite();
	header.sprite.SetX(width_percent(6));
	header.sprite.SetY(global.univention.sprite.GetY());
	header.setText = fun (string) {
		global.welcome.header.image = text_to_image(string, text_color, text_font_heading);
		global.welcome.header.sprite.SetImage(global.welcome.header.image);
	};
	global.welcome.header = header;

	# addresses
	addresses.sprite = Sprite();
	addresses.sprite.SetX(logo2.sprite.GetX());
	addresses.setText = fun (string) {
		global.welcome.addresses.sprite.SetY(global.welcome.message2.sprite.GetY() + global.welcome.message2.image.GetHeight());
		global.welcome.addresses.image = text_to_image(textWrapToSize(string, 1, text_font_ip), text_color, text_font_ip);
		global.welcome.addresses.sprite.SetX(global.welcome.message2.sprite.GetX() + (global.welcome.message2.image.GetWidth() - global.welcome.addresses.image.GetWidth()) / 2);
		global.welcome.addresses.sprite.SetImage(global.welcome.addresses.image);
	};
	global.welcome.addresses = addresses;

	# logo step3
	logo3.image = Image("logo-step3.png");
	logo3.sprite = Sprite(logo3.image);
	logo3.sprite.SetOpacity(1);
	logo3.sprite.SetX(logo2.sprite.GetX() + logo2.image.GetWidth() + 102);
	logo3.sprite.SetY(logo2.sprite.GetY() - logo3.image.GetHeight() / 2 + logo2.image.GetHeight() / 2);
	logo3.setImage = fun (string) {
		local.new = Image(string);
		local.scale_factor = global.welcome.logo3.image.GetWidth() / new.GetWidth();
		global.welcome.logo3.image = new.Scale(new.GetWidth() * scale_factor, new.GetHeight() * scale_factor);
		global.welcome.logo3.sprite.SetY(
			global.welcome.logo2.sprite.GetY() - global.welcome.logo3.image.GetHeight() / 2 + global.welcome.logo2.image.GetHeight() / 2);
		global.welcome.logo3.sprite.SetImage(global.welcome.logo3.image);
	};
	global.welcome.logo3 = logo3;

	# number step3
	number3.image = Image("number3.png");
	number3.sprite = Sprite(number3.image);
	number3.sprite.SetOpacity(1);
	number3.sprite.SetX(logo3.sprite.GetX() + (logo3.image.GetWidth() / 2) - number3.image.GetWidth() / 2);
	number3.sprite.SetY(number2.sprite.GetY());
	global.welcome.number3 = number3;

	# message step3
	message3.sprite = Sprite();
	message3.sprite.SetY(message2.sprite.GetY());
	message3.setText = fun (string) {
		global.welcome.message3.image = text_to_image(
			textWrapToSize(string, global.welcome.logo3.image.GetWidth(), text_font));
		global.welcome.message3.sprite.SetX(global.welcome.logo3.sprite.GetX() + (global.welcome.logo3.image.GetWidth() - global.welcome.message3.image.GetWidth()) / 2);
		global.welcome.message3.sprite.SetImage(global.welcome.message3.image);
	};
	global.welcome.message3 = message3;

	# arrows
	arrow1.image = Image("arrow.png");
	arrow1.sprite = Sprite(arrow1.image);
	arrow1.sprite.SetOpacity(1);
	arrow1.logo1end = logo1.sprite.GetX() + logo1.image.GetWidth();
	arrow1.logo2start = logo2.sprite.GetX();
	arrow1.logo1distlogo2 = arrow1.logo2start - arrow1.logo1end;
	arrow1.x = arrow1.logo1end + arrow1.logo1distlogo2 / 2 - arrow1.image.GetWidth() / 2;
	arrow1.sprite.SetX(arrow1.x);
	arrow1.sprite.SetY(logo1.sprite.GetY() + logo1.image.GetHeight() / 2 - arrow1.image.GetHeight() / 2);
	global.welcome.arrow1 = arrow1;

	arrow2.image = Image("arrow.png");
	arrow2.sprite = Sprite(arrow2.image);
	arrow2.sprite.SetOpacity(1);
	arrow2.logo2end = logo2.sprite.GetX() + logo2.image.GetWidth();
	arrow2.logo3start = logo3.sprite.GetX();
	arrow2.logo2distlogo3 = arrow2.logo3start - arrow2.logo2end;
	arrow2.x = arrow2.logo2end + arrow2.logo2distlogo3 / 2 - arrow2.image.GetWidth() / 2;
	arrow2.sprite.SetX(arrow2.x);
	arrow2.sprite.SetY(logo1.sprite.GetY() + logo1.image.GetHeight() / 2 - arrow2.image.GetHeight() / 2);
	global.welcome.arrow2 = arrow2;

	# console text
	console.sprite = Sprite();
	console.setText = fun (string) {
		global.welcome.console.image = text_to_image(string, text_color_light);
		global.welcome.console.sprite.SetX(width_percent(50) - global.welcome.console.image.GetWidth() / 2);
		global.welcome.console.sprite.SetY(height_percent(85));
		global.welcome.console.sprite.SetImage(global.welcome.console.image);
	};
	global.welcome.console = console;

	# address - relative to logo
	address.sprite = Sprite();
	address.setText = fun (string) {
		global.welcome.address.image = text_to_image(string, text_color, text_font_ip);
		global.welcome.address.sprite.SetX(width_percent(50) - global.welcome.address.image.GetWidth() / 2 + 12);
		global.welcome.address.sprite.SetY(
			global.welcome.logo2.sprite.GetY() + global.welcome.logo2.image.GetHeight() /2 - global.welcome.address.image.GetHeight() / 2);
		global.welcome.address.sprite.SetImage(global.welcome.address.image);
	};
	global.welcome.address = address;

	welcome_screen_opacity(1);
}

#############
# callbacks #
#############

##########
# normal #
##########

fun display_normal_callback () {

	if (global.status != "univention-welcome") {
		global.status = "normal";
		if (global.dialog) dialog_opacity (0);
		if (global.ask) ask_opacity (0);
		normal_opacity(1);
	} else {
		welcome_screen_setup();
	}
}

# the callback function is called when the display should return to normal
Plymouth.SetDisplayNormalFunction(display_normal_callback);

############
# password #
############

fun display_password_callback (prompt, bullets) {

	global.status = "password";
	if (!prompt) prompt = "";
	local.list = StringToList(prompt);
	local.msg;

	# disable logo
	global.logo.sprite.SetOpacity(0.0);
	global.box.sprite.SetOpacity(1.0);

	# set up dialog
	if (!global.dialog) dialog_setup();
	else dialog_opacity(1);

	# prompt
	global.dialog.prompt.setText(prompt);

	# bullets
	for (index = 0; dialog.bullet[index] || index < bullets; index++) {
		if (!dialog.bullet[index]) {
			dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
			dialog.bullet[index].x = dialog.entry.x + 5 + index * dialog.bullet_image.GetWidth();
			dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
			dialog.bullet[index].z = dialog.entry.z + 1;
			dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
		}
		if (index < bullets)
			dialog.bullet[index].sprite.SetOpacity(1);
		else
			dialog.bullet[index].sprite.SetOpacity(0);
	}
}

# the callback function is called when the display should display a
# password dialogue. First arg is prompt string, the second is the number of bullets.
Plymouth.SetDisplayPasswordFunction(display_password_callback);

##########
# status #
##########

statusmsg.sprite = Sprite();
statusmsg.font = text_font;
statusmsg.sprite.SetX(Window.GetX() + width_percent(6));
statusmsg.sprite.SetY(Window.GetY() + height_percent(85));

fun update_status_callback (text) {

	if (stringStartsWith(text, "univention-welcome")) {
		if (text == "univention-welcome") {
			global.status = "univention-welcome";
			welcome_screen_setup();
		} else if (stringStartsWith(text, "univention-welcome:header:")) {
			global.welcome.header.setText(text.SubString(26, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:message1:")) {
			global.welcome.message1.setText(text.SubString(28, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:message2:")) {
			global.welcome.message2.setText(text.SubString(28, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:message3:")) {
			global.welcome.message3.setText(text.SubString(28, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:address:")) {
			global.welcome.address.setText(text.SubString(27, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:console:")) {
			global.welcome.console.setText(text.SubString(27, StringLength(text)));
		} else if (stringStartsWith(text, "univention-welcome:addresses:")) {
			global.welcome.addresses.setText(text.SubString(29, StringLength(text)));
		}
	}
	else if (stringStartsWith(text, "univention-splash")) {
		if (stringStartsWith(text, "univention-splash:status:")) {
			global.logo.text.setText(text.SubString(25, StringLength(text)));
		}
	}
	else if (text == "normal") {
		global.status = "normal";
		normal_setup();
	} else {
		local.image = text_to_image(textWrapToSize(text, width_percent(88), text_font));
		string_it = 0;
		update_strings[string_it] = "";
		for (i=0; (String(text).CharAt(i) != ""); i++) {
			local.temp_char = String(text).CharAt(i);
			if (temp_char != ":")
				update_strings[string_it] += temp_char;
			else
				update_strings[++string_it] = "";
		}
		if ((string_it >= 2) && (update_strings[0] == "fsck")) {
			local.device = update_strings[1];
			local.progress = update_strings[2];
			if (StringToInteger(progress) >= 100)
				image = Image.Text("", 0, 0, 0, 1, statusmsg.font);
			else
				image = text_to_image(textWrapToSize("Checking disk " + device + " (" + progress + "%)", width_percent(88), text_font));
		}
		statusmsg.sprite.SetImage(image);
	}
}

# the callback function is called with the new boot status string
Plymouth.SetUpdateStatusFunction(update_status_callback);

########
# quit #
########

#fun quit_callback () {
#}

#Plymouth.SetQuitFunction(quit_callback);

############
# question #
############

fun question_callback (prompt, string) {

	global.status = "question";

	# disable logo
	global.logo.sprite.SetOpacity(0.0);

	# setup dialog
	if (!global.ask) ask_dialog();
	else ask_opacity(1);

	# display prompt
	global.ask.prompt.setText(prompt);

	# display text
	global.ask.text.setText(string);
}

# the callback function is called when the display should display a question
# dialogue. First arg is prompt string, the second is the entry contents.
Plymouth.SetDisplayQuestionFunction(question_callback);

###########
# message #
###########

# message
message.font = "Sans 13";
message.sprite = Sprite();
message.sprite.SetPosition(10, 12, 10000);
message.maxLength = 70;

# fsck action line
message_action.sprite = Sprite();
message_action.sprite.SetPosition(10, 32, 10000);

fun message_callback (text) {

	local.substring = "keys:";

	# Look for the "keys:" prefix
	local.keys = StringString(text, local.substring);

	if (keys != NULL)
		text = StringCopy(text, keys + StringLength(local.substring), NULL);

	if (StringLength(text) > message.maxLength) {
		text = text.SubString(0, message.maxLength - 3);
		text += "...";
	}

	local.start = Window.GetWidth() - 10 - Image.Text(text, 0, 0, 0, 0, message.font).GetWidth();

	if (keys != NULL) {
		message_action.sprite.SetX(local.start);
		local.image = Image.Text(text, 0.4, 0.4, 0.4, 1, message.font);
		message_action.sprite.SetImage(local.image);
	}
	else {
		message.sprite.SetX(local.start);
		local.image = Image.Text(text, 0.4, 0.4, 0.4, 1, message.font);
		message.sprite.SetImage(image);
	}
}

# he callback function is called when new message should be displayed.
# First arg is message to display.
Plymouth.SetMessageFunction(message_callback);

###########
# refresh #
###########

fun refresh_callback () {

	if (global.status != "univention-welcome") {
		# logo animation
		global.logo.count = global.logo.count + 0.2;
		index = Math.Int(global.logo.count % 48);
		if (index != global.logo.index) {
			global.logo.index = index;
			global.logo.sprite.SetImage(logo[index].image);
		}
	}
}

# calling Plymouth.SetRefreshFunction with a function will set that
# function to be called up to 50 times every second
Plymouth.SetRefreshFunction (refresh_callback);

